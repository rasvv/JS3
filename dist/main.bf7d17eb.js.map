{"version":3,"sources":["src/changeForm.js","src/luxon.js","src/diffdates.js","src/utils.js","src/datecalc.js","src/howler.js","src/timer.js","src/main.js"],"names":["currentlyForm","document","querySelectorAll","currentlyButton","changeForm","formName","btnName","forEach","form","style","display","btn","background","_exp","Object","defineProperty","value","LuxonError","Error","InvalidDateTimeError","reason","toMessage","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstractError","n","s","l","DATE_SHORT","year","month","day","DATE_MED","DATE_FULL","DATE_HUGE","weekday","TIME_SIMPLE","hour","minute","TIME_WITH_SECONDS","second","TIME_WITH_SHORT_OFFSET","timeZoneName","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","hour12","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_MED_WITH_WEEKDAY","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","isUndefined","o","isNumber","isInteger","isString","isDate","prototype","toString","call","hasIntl","Intl","DateTimeFormat","e","hasFormatToParts","formatToParts","hasRelative","RelativeTimeFormat","maybeArray","thing","Array","isArray","bestBy","arr","by","compare","length","reduce","best","next","pair","pick","obj","keys","a","k","hasOwnProperty","prop","integerBetween","bottom","top","floorMod","x","Math","floor","padStart","input","repeat","slice","parseInteger","string","undefined","parseInt","parseMillis","fraction","f","parseFloat","roundTo","number","digits","towardZero","factor","pow","rounder","trunc","round","isLeapYear","daysInYear","daysInMonth","modMonth","objToLocalTS","d","Date","UTC","millisecond","setUTCFullYear","getUTCFullYear","weeksInWeekYear","weekYear","p1","last","p2","untruncateYear","parseZoneInfo","ts","offsetFormat","locale","timeZone","date","intlOpts","modified","assign","intl","parsed","find","m","type","toLowerCase","without","format","trimmed","substring","replace","signedOffset","offHourStr","offMinuteStr","offHour","Number","isNaN","offMin","is","asNumber","numericValue","normalizeObject","normalizer","nonUnitKeys","normalized","u","indexOf","v","formatOffset","offset","hours","minutes","abs","sign","base","RangeError","timeObject","ianaRegex","stringify","JSON","sort","monthsLong","monthsShort","monthsNarrow","months","weekdaysLong","weekdaysShort","weekdaysNarrow","weekdays","meridiems","erasLong","erasShort","erasNarrow","eras","meridiemForDateTime","dt","weekdayForDateTime","monthForDateTime","eraForDateTime","formatRelativeTime","count","numeric","narrow","units","years","quarters","weeks","days","seconds","lastable","isDay","isInPast","fmtValue","singular","lilUnits","fmtUnit","formatString","knownFormat","key","dateTimeHuge","stringifyTokens","splits","tokenToString","token","literal","val","macroTokenToFormatOpts","D","DD","DDD","DDDD","t","tt","ttt","tttt","T","TT","TTT","TTTT","ff","fff","ffff","F","FF","FFF","FFFF","Formatter","formatOpts","opts","loc","systemLoc","df","redefaultToSystem","dtFormatter","resolvedOptions","p","forceSimple","padTo","numberFormatter","fmt","knownEnglish","listingMode","useDateTimeFormatter","outputCalendar","extract","isOffsetFixed","allowZ","isValid","zone","standalone","era","parseFormat","num","offsetName","zoneName","meridiem","weekNumber","ordinal","quarter","maybeMacro","formatWithSystemDefault","dur","lildur","tokenToField","tokens","realTokens","found","concat","collapsed","shiftTo","map","filter","mapped","get","current","currentFull","bracketed","i","c","charAt","push","Invalid","explanation","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Zone","otherZone","singleton","LocalZone","getTimezoneOffset","matchingRegex","RegExp","dtfCache","makeDTF","typeToPos","hackyOffset","dtf","formatted","exec","fMonth","fDay","partsOffset","filled","pos","ianaZoneCache","IANAZone","name","valid","isValidZone","asTS","over","match","specifier","singleton$1","FixedOffsetZone","fixed","utcInstance","r","InvalidZone","NaN","normalizeZone","defaultZone","lowered","parseGMTOffset","instance","isValidSpecifier","create","parseSpecifier","now","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","throwOnInvalid","Settings","z","numberingSystem","Locale","resetCache","intlDTCache","getCachedDTF","locString","intlNumCache","getCachedINF","inf","NumberFormat","intlRelCache","getCachedRTF","cacheKeyOpts","sysLocaleCache","systemLocale","computedSys","parseLocaleString","localeStr","uIndex","options","smaller","calendar","intlConfigString","mapMonths","ms","DateTime","utc","mapWeekdays","listStuff","defaultOK","englishFn","intlFn","mode","supportsFastNumbers","startsWith","PolyNumberFormatter","useGrouping","minimumIntegerDigits","PolyDateFormatter","universal","fromMillis","toJSDate","tokenFormat","formatDateTimeFromString","PolyRelFormatter","isEnglish","rtf","numbering","specifiedLocale","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","monthsCache","meridiemCache","eraCache","fastNumbersCached","hasFTP","isActuallyEn","hasNoWeirdness","alts","getOwnPropertyNames","defaultToEN","clone","formatStr","field","matching","fastNumbers","other","combineRegexes","regexes","full","combineExtractors","extractors","ex","mergedVals","mergedZone","cursor","parse","patterns","regex","extractor","simpleParse","ret","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","isoYmdRegex","isoWeekRegex","isoOrdinalRegex","extractISOWeekData","extractISOOrdinalData","sqlYmdRegex","sqlTimeRegex","sqlTimeExtensionRegex","int","fallback","extractISOYmd","extractISOTime","extractISOOffset","local","fullOffset","extractIANAZone","isoDuration","extractISODuration","yearStr","monthStr","weekStr","dayStr","hourStr","minuteStr","secondStr","millisecondsStr","hasNegativePrefix","maybeNegate","milliseconds","obsOffsets","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","fromStrings","weekdayStr","result","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","isoYmdWithTimeExtensionRegex","isoWeekWithTimeExtensionRegex","isoOrdinalWithTimeExtensionRegex","isoTimeCombinedRegex","extractISOYmdTimeAndOffset","extractISOWeekTimeAndOffset","extractISOOrdinalDataAndTime","extractISOTimeAndOffset","parseISODate","parseRFC2822Date","parseHTTPDate","parseISODuration","sqlYmdWithTimeExtensionRegex","sqlTimeCombinedRegex","extractISOYmdTimeOffsetAndIANAZone","extractISOTimeOffsetAndIANAZone","parseSQL","INVALID","lowOrderMatrix","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","reverseUnits","reverse","clear","conf","values","conversionAccuracy","Duration","antiTrunc","ceil","convert","matrix","fromMap","fromUnit","toMap","toUnit","conv","raw","added","normalizeValues","vals","previous","config","accurate","invalid","isLuxonDuration","fmtOpts","formatDurationFromString","includeConfig","toISO","as","duration","friendlyDuration","plus","negate","fn","normalizeUnit","toObject","built","lastUnit","accumulated","own","ak","down","normalize","negated","equals","fromObject","text","week","durationish","isDuration","INVALID$1","validateStartEnd","start","end","Interval","isLuxonInterval","invalidReason","toDuration","startOf","diff","minus","hasSame","valueOf","dateTime","fromDateTimes","dateTimes","sorted","friendlyDateTime","contains","results","numberOfParts","splitBy","intervals","xor","intersection","isEmpty","toISODate","toISOTime","dateFormat","separator","toFormat","mapFn","builtStart","builtEnd","validateError","split","fromISO","after","before","b","item","sofar","overlaps","abutsStart","union","final","currentCount","ends","time","merge","Info","proto","setZone","set","intlTokens","zones","relative","dayDiff","earlier","later","utcDayStart","toUTC","keepLocalTime","highOrderDiffs","differs","lowestOrder","highWater","differ","delta","remainingMillis","lowerOrderUnits","numberingSystems","arab","arabext","bali","beng","deva","fullwide","gujr","hanidec","khmr","knda","laoo","limb","mlym","mong","mymr","orya","tamldec","telu","thai","tibt","latn","numberingSystemsUTF16","hanidecChars","parseDigits","str","code","charCodeAt","search","min","max","digitRegex","append","MISSING_FTP","intUnit","post","deser","fixListRegex","stripInsensitivities","oneOf","strings","startIndex","join","findIndex","groups","simple","escapeToken","unitForToken","one","two","three","four","six","oneOrTwo","oneToThree","oneToSix","oneToNine","twoToFour","fourToSix","unitate","partTypeStyleToTokenVal","short","long","dayperiod","dayPeriod","tokenForPart","part","buildRegex","re","handlers","matches","all","matchIndex","h","dateTimeFromMatches","toField","Z","q","M","G","y","S","dummyDateTimeCache","getDummyDateTime","maybeExpandMacroToken","formatter","formatDateTimeParts","includes","expandMacroTokens","explainFromTokens","disqualifyingUnit","regexString","rawMatches","parseFromTokens","nonLeapLadder","leapLadder","unitOutOfRange","dayOfWeek","js","getUTCDay","computeOrdinal","uncomputeOrdinal","table","month0","gregorianToWeek","gregObj","weekToGregorian","weekData","weekdayOfJan4","yearInDays","gregorianToOrdinal","gregData","ordinalToGregorian","ordinalData","hasInvalidWeekData","validYear","validWeek","validWeekday","hasInvalidOrdinalData","validOrdinal","hasInvalidGregorianData","validMonth","validDay","hasInvalidTimeData","validHour","validMinute","validSecond","validMillisecond","INVALID$2","MAX_DATE","unsupportedZone","possiblyCachedWeekData","clone$1","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","tsToObj","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToTS","adjustTime","oPre","millisToAdd","parseDataToDateTime","parsedZone","interpretationZone","toTechFormat","toTechTimeFormat","suppressSeconds","suppressMilliseconds","includeOffset","includeZone","spaceZone","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedUnits$1","orderedWeekUnits","orderedOrdinalUnits","weeknumber","weeksnumber","weeknumbers","weekyear","weekyears","quickDT","tsNow","diffRelative","calendary","relFormatter","unchanged","ot","_zone","isLuxonDateTime","keepCalendarTime","newTS","offsetGuess","reconfigure","mixed","normalizedUnit","redefaultToEN","formatDateTime","toSQLDate","toSQLTime","toMillis","otherDateTime","durOpts","otherIsLater","diffed","inputMs","endOf","padding","zoneToUse","offsetProvis","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","gregorian","fromOpts","fromFormat","every","isDateTime","fromFormatExplain","dateTimeish","fromJSDate","diffDates","firstDate","secondDate","diffToHTML","formatError","dateCalcResult","getElementById","dateDiff","event","innerHTML","elements","HowlerGlobal","init","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","state","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","isOldOpera","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","createBufferSource","buffer","connect","destination","noteOn","resume","onended","disconnect","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","src","error","_autoplay","autoplay","_format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","action","url","location","protocol","Sound","loadBuffer","internal","id","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","_seek","timeout","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","arguments","_clearSound","_interval","args","apply","fade","from","to","len","linearRampToValueAtTime","_startFadeInterval","isGroup","steps","stepLen","lastTick","_fadeTo","setInterval","tick","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","index","splice","remCache","cache","on","events","off","isId","msg","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","createGain","createGainNode","_errorListener","_loadListener","_endListener","__default","loadSound","data","atob","dataView","Uint8Array","decodeAudioData","XMLHttpRequest","open","responseType","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","define","amd","exports","global","buttonRun","timerShow","timer","showText","runTimer","dateCalcForm","timerForm","btnCurrentFormCalc","btnCurrentFormTimer","preventDefault"],"mappings":"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","file":"main.bf7d17eb.js","sourceRoot":"..","sourcesContent":["const currentlyForm = document.querySelectorAll('form');\r\nconst currentlyButton = document.querySelectorAll('button');\r\n\r\nexport const changeForm = (formName, btnName) => {\r\n\tcurrentlyForm.forEach((form) => {\r\n\t\tform.style.display = 'none';\r\n\t});\r\n\r\n\tcurrentlyButton.forEach((btn) => {\r\n\t\tbtn.style.background  = 'lightgrey';\r\n\t});\r\n\r\n\tformName.style.display = 'block';\r\n\tbtnName.style.background  = 'lime';\r\n};\r\n","let _exp = {};\r\nObject.defineProperty(_exp, '__esModule', {\r\n  value: true\r\n}); // these aren't really private, but nor are they really useful to document\r\n\r\n/**\r\n * @private\r\n */\r\n\r\nclass LuxonError extends Error {}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass InvalidDateTimeError extends LuxonError {\r\n  constructor(reason) {\r\n    super(`Invalid DateTime: ${reason.toMessage()}`);\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass InvalidIntervalError extends LuxonError {\r\n  constructor(reason) {\r\n    super(`Invalid Interval: ${reason.toMessage()}`);\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass InvalidDurationError extends LuxonError {\r\n  constructor(reason) {\r\n    super(`Invalid Duration: ${reason.toMessage()}`);\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass ConflictingSpecificationError extends LuxonError {}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass InvalidUnitError extends LuxonError {\r\n  constructor(unit) {\r\n    super(`Invalid unit ${unit}`);\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass InvalidArgumentError extends LuxonError {}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass ZoneIsAbstractError extends LuxonError {\r\n  constructor() {\r\n    super(\"Zone is an abstract class\");\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nconst n = \"numeric\",\r\n      s = \"short\",\r\n      l = \"long\";\r\nconst DATE_SHORT = {\r\n  year: n,\r\n  month: n,\r\n  day: n\r\n};\r\nconst DATE_MED = {\r\n  year: n,\r\n  month: s,\r\n  day: n\r\n};\r\nconst DATE_FULL = {\r\n  year: n,\r\n  month: l,\r\n  day: n\r\n};\r\nconst DATE_HUGE = {\r\n  year: n,\r\n  month: l,\r\n  day: n,\r\n  weekday: l\r\n};\r\nconst TIME_SIMPLE = {\r\n  hour: n,\r\n  minute: n\r\n};\r\nconst TIME_WITH_SECONDS = {\r\n  hour: n,\r\n  minute: n,\r\n  second: n\r\n};\r\nconst TIME_WITH_SHORT_OFFSET = {\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  timeZoneName: s\r\n};\r\nconst TIME_WITH_LONG_OFFSET = {\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  timeZoneName: l\r\n};\r\nconst TIME_24_SIMPLE = {\r\n  hour: n,\r\n  minute: n,\r\n  hour12: false\r\n};\r\n/**\r\n * {@link toLocaleString}; format like '09:30:23', always 24-hour.\r\n */\r\n\r\nconst TIME_24_WITH_SECONDS = {\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  hour12: false\r\n};\r\n/**\r\n * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.\r\n */\r\n\r\nconst TIME_24_WITH_SHORT_OFFSET = {\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  hour12: false,\r\n  timeZoneName: s\r\n};\r\n/**\r\n * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.\r\n */\r\n\r\nconst TIME_24_WITH_LONG_OFFSET = {\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  hour12: false,\r\n  timeZoneName: l\r\n};\r\n/**\r\n * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\r\n */\r\n\r\nconst DATETIME_SHORT = {\r\n  year: n,\r\n  month: n,\r\n  day: n,\r\n  hour: n,\r\n  minute: n\r\n};\r\n/**\r\n * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\r\n */\r\n\r\nconst DATETIME_SHORT_WITH_SECONDS = {\r\n  year: n,\r\n  month: n,\r\n  day: n,\r\n  hour: n,\r\n  minute: n,\r\n  second: n\r\n};\r\nconst DATETIME_MED = {\r\n  year: n,\r\n  month: s,\r\n  day: n,\r\n  hour: n,\r\n  minute: n\r\n};\r\nconst DATETIME_MED_WITH_SECONDS = {\r\n  year: n,\r\n  month: s,\r\n  day: n,\r\n  hour: n,\r\n  minute: n,\r\n  second: n\r\n};\r\nconst DATETIME_MED_WITH_WEEKDAY = {\r\n  year: n,\r\n  month: s,\r\n  day: n,\r\n  weekday: s,\r\n  hour: n,\r\n  minute: n\r\n};\r\nconst DATETIME_FULL = {\r\n  year: n,\r\n  month: l,\r\n  day: n,\r\n  hour: n,\r\n  minute: n,\r\n  timeZoneName: s\r\n};\r\nconst DATETIME_FULL_WITH_SECONDS = {\r\n  year: n,\r\n  month: l,\r\n  day: n,\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  timeZoneName: s\r\n};\r\nconst DATETIME_HUGE = {\r\n  year: n,\r\n  month: l,\r\n  day: n,\r\n  weekday: l,\r\n  hour: n,\r\n  minute: n,\r\n  timeZoneName: l\r\n};\r\nconst DATETIME_HUGE_WITH_SECONDS = {\r\n  year: n,\r\n  month: l,\r\n  day: n,\r\n  weekday: l,\r\n  hour: n,\r\n  minute: n,\r\n  second: n,\r\n  timeZoneName: l\r\n};\r\n/*\r\n  This is just a junk drawer, containing anything used across multiple classes.\r\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\r\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\r\n*/\r\n\r\n/**\r\n * @private\r\n */\r\n// TYPES\r\n\r\nfunction isUndefined(o) {\r\n  return typeof o === \"undefined\";\r\n}\r\n\r\nfunction isNumber(o) {\r\n  return typeof o === \"number\";\r\n}\r\n\r\nfunction isInteger(o) {\r\n  return typeof o === \"number\" && o % 1 === 0;\r\n}\r\n\r\nfunction isString(o) {\r\n  return typeof o === \"string\";\r\n}\r\n\r\nfunction isDate(o) {\r\n  return Object.prototype.toString.call(o) === \"[object Date]\";\r\n} // CAPABILITIES\r\n\r\n\r\nfunction hasIntl() {\r\n  try {\r\n    return typeof Intl !== \"undefined\" && Intl.DateTimeFormat;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction hasFormatToParts() {\r\n  return !isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\r\n}\r\n\r\nfunction hasRelative() {\r\n  try {\r\n    return typeof Intl !== \"undefined\" && !!Intl.RelativeTimeFormat;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n} // OBJECTS AND ARRAYS\r\n\r\n\r\nfunction maybeArray(thing) {\r\n  return Array.isArray(thing) ? thing : [thing];\r\n}\r\n\r\nfunction bestBy(arr, by, compare) {\r\n  if (arr.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  return arr.reduce((best, next) => {\r\n    const pair = [by(next), next];\r\n\r\n    if (!best) {\r\n      return pair;\r\n    } else if (compare(best[0], pair[0]) === best[0]) {\r\n      return best;\r\n    } else {\r\n      return pair;\r\n    }\r\n  }, null)[1];\r\n}\r\n\r\nfunction pick(obj, keys) {\r\n  return keys.reduce((a, k) => {\r\n    a[k] = obj[k];\r\n    return a;\r\n  }, {});\r\n}\r\n\r\nfunction hasOwnProperty(obj, prop) {\r\n  return Object.prototype.hasOwnProperty.call(obj, prop);\r\n} // NUMBERS AND STRINGS\r\n\r\n\r\nfunction integerBetween(thing, bottom, top) {\r\n  return isInteger(thing) && thing >= bottom && thing <= top;\r\n} // x % n but takes the sign of n instead of x\r\n\r\n\r\nfunction floorMod(x, n) {\r\n  return x - n * Math.floor(x / n);\r\n}\r\n\r\nfunction padStart(input, n = 2) {\r\n  if (input.toString().length < n) {\r\n    return (\"0\".repeat(n) + input).slice(-n);\r\n  } else {\r\n    return input.toString();\r\n  }\r\n}\r\n\r\nfunction parseInteger(string) {\r\n  if (isUndefined(string) || string === null || string === \"\") {\r\n    return undefined;\r\n  } else {\r\n    return parseInt(string, 10);\r\n  }\r\n}\r\n\r\nfunction parseMillis(fraction) {\r\n  // Return undefined (instead of 0) in these cases, where fraction is not set\r\n  if (isUndefined(fraction) || fraction === null || fraction === \"\") {\r\n    return undefined;\r\n  } else {\r\n    const f = parseFloat(\"0.\" + fraction) * 1000;\r\n    return Math.floor(f);\r\n  }\r\n}\r\n\r\nfunction roundTo(number, digits, towardZero = false) {\r\n  const factor = Math.pow(10, digits),\r\n        rounder = towardZero ? Math.trunc : Math.round;\r\n  return rounder(number * factor) / factor;\r\n} // DATE BASICS\r\n\r\n\r\nfunction isLeapYear(year) {\r\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\r\n}\r\n\r\nfunction daysInYear(year) {\r\n  return isLeapYear(year) ? 366 : 365;\r\n}\r\n\r\nfunction daysInMonth(year, month) {\r\n  const modMonth = floorMod(month - 1, 12) + 1,\r\n        modYear = year + (month - modMonth) / 12;\r\n\r\n  if (modMonth === 2) {\r\n    return isLeapYear(modYear) ? 29 : 28;\r\n  } else {\r\n    return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];\r\n  }\r\n} // covert a calendar object to a local timestamp (epoch, but with the offset baked in)\r\n\r\n\r\nfunction objToLocalTS(obj) {\r\n  let d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond); // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that\r\n\r\n  if (obj.year < 100 && obj.year >= 0) {\r\n    d = new Date(d);\r\n    d.setUTCFullYear(d.getUTCFullYear() - 1900);\r\n  }\r\n\r\n  return +d;\r\n}\r\n\r\nfunction weeksInWeekYear(weekYear) {\r\n  const p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7,\r\n        last = weekYear - 1,\r\n        p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\r\n  return p1 === 4 || p2 === 3 ? 53 : 52;\r\n}\r\n\r\nfunction untruncateYear(year) {\r\n  if (year > 99) {\r\n    return year;\r\n  } else return year > 60 ? 1900 + year : 2000 + year;\r\n} // PARSING\r\n\r\n\r\nfunction parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\r\n  const date = new Date(ts),\r\n        intlOpts = {\r\n    hour12: false,\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\"\r\n  };\r\n\r\n  if (timeZone) {\r\n    intlOpts.timeZone = timeZone;\r\n  }\r\n\r\n  const modified = Object.assign({\r\n    timeZoneName: offsetFormat\r\n  }, intlOpts),\r\n        intl = hasIntl();\r\n\r\n  if (intl && hasFormatToParts()) {\r\n    const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(m => m.type.toLowerCase() === \"timezonename\");\r\n    return parsed ? parsed.value : null;\r\n  } else if (intl) {\r\n    // this probably doesn't work for all locales\r\n    const without = new Intl.DateTimeFormat(locale, intlOpts).format(date),\r\n          included = new Intl.DateTimeFormat(locale, modified).format(date),\r\n          diffed = included.substring(without.length),\r\n          trimmed = diffed.replace(/^[, \\u200e]+/, \"\");\r\n    return trimmed;\r\n  } else {\r\n    return null;\r\n  }\r\n} // signedOffset('-5', '30') -> -330\r\n\r\n\r\nfunction signedOffset(offHourStr, offMinuteStr) {\r\n  let offHour = parseInt(offHourStr, 10); // don't || this because we want to preserve -0\r\n\r\n  if (Number.isNaN(offHour)) {\r\n    offHour = 0;\r\n  }\r\n\r\n  const offMin = parseInt(offMinuteStr, 10) || 0,\r\n        offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;\r\n  return offHour * 60 + offMinSigned;\r\n} // COERCION\r\n\r\n\r\nfunction asNumber(value) {\r\n  const numericValue = Number(value);\r\n  if (typeof value === \"boolean\" || value === \"\" || Number.isNaN(numericValue)) throw new InvalidArgumentError(`Invalid unit value ${value}`);\r\n  return numericValue;\r\n}\r\n\r\nfunction normalizeObject(obj, normalizer, nonUnitKeys) {\r\n  const normalized = {};\r\n\r\n  for (const u in obj) {\r\n    if (hasOwnProperty(obj, u)) {\r\n      if (nonUnitKeys.indexOf(u) >= 0) continue;\r\n      const v = obj[u];\r\n      if (v === undefined || v === null) continue;\r\n      normalized[normalizer(u)] = asNumber(v);\r\n    }\r\n  }\r\n\r\n  return normalized;\r\n}\r\n\r\nfunction formatOffset(offset, format) {\r\n  const hours = Math.trunc(offset / 60),\r\n        minutes = Math.abs(offset % 60),\r\n        sign = hours >= 0 && !Object.is(hours, -0) ? \"+\" : \"-\",\r\n        base = `${sign}${Math.abs(hours)}`;\r\n\r\n  switch (format) {\r\n    case \"short\":\r\n      return `${sign}${padStart(Math.abs(hours), 2)}:${padStart(minutes, 2)}`;\r\n\r\n    case \"narrow\":\r\n      return minutes > 0 ? `${base}:${minutes}` : base;\r\n\r\n    case \"techie\":\r\n      return `${sign}${padStart(Math.abs(hours), 2)}${padStart(minutes, 2)}`;\r\n\r\n    default:\r\n      throw new RangeError(`Value format ${format} is out of range for property format`);\r\n  }\r\n}\r\n\r\nfunction timeObject(obj) {\r\n  return pick(obj, [\"hour\", \"minute\", \"second\", \"millisecond\"]);\r\n}\r\n\r\nconst ianaRegex = /[A-Za-z_+-]{1,256}(:?\\/[A-Za-z_+-]{1,256}(\\/[A-Za-z_+-]{1,256})?)?/;\r\n\r\nfunction stringify(obj) {\r\n  return JSON.stringify(obj, Object.keys(obj).sort());\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nconst monthsLong = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\nconst monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nconst monthsNarrow = [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"];\r\n\r\nfunction months(length) {\r\n  switch (length) {\r\n    case \"narrow\":\r\n      return monthsNarrow;\r\n\r\n    case \"short\":\r\n      return monthsShort;\r\n\r\n    case \"long\":\r\n      return monthsLong;\r\n\r\n    case \"numeric\":\r\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"];\r\n\r\n    case \"2-digit\":\r\n      return [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nconst weekdaysLong = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\nconst weekdaysShort = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\nconst weekdaysNarrow = [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"];\r\n\r\nfunction weekdays(length) {\r\n  switch (length) {\r\n    case \"narrow\":\r\n      return weekdaysNarrow;\r\n\r\n    case \"short\":\r\n      return weekdaysShort;\r\n\r\n    case \"long\":\r\n      return weekdaysLong;\r\n\r\n    case \"numeric\":\r\n      return [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"];\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nconst meridiems = [\"AM\", \"PM\"];\r\nconst erasLong = [\"Before Christ\", \"Anno Domini\"];\r\nconst erasShort = [\"BC\", \"AD\"];\r\nconst erasNarrow = [\"B\", \"A\"];\r\n\r\nfunction eras(length) {\r\n  switch (length) {\r\n    case \"narrow\":\r\n      return erasNarrow;\r\n\r\n    case \"short\":\r\n      return erasShort;\r\n\r\n    case \"long\":\r\n      return erasLong;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nfunction meridiemForDateTime(dt) {\r\n  return meridiems[dt.hour < 12 ? 0 : 1];\r\n}\r\n\r\nfunction weekdayForDateTime(dt, length) {\r\n  return weekdays(length)[dt.weekday - 1];\r\n}\r\n\r\nfunction monthForDateTime(dt, length) {\r\n  return months(length)[dt.month - 1];\r\n}\r\n\r\nfunction eraForDateTime(dt, length) {\r\n  return eras(length)[dt.year < 0 ? 0 : 1];\r\n}\r\n\r\nfunction formatRelativeTime(unit, count, numeric = \"always\", narrow = false) {\r\n  const units = {\r\n    years: [\"year\", \"yr.\"],\r\n    quarters: [\"quarter\", \"qtr.\"],\r\n    months: [\"month\", \"mo.\"],\r\n    weeks: [\"week\", \"wk.\"],\r\n    days: [\"day\", \"day\", \"days\"],\r\n    hours: [\"hour\", \"hr.\"],\r\n    minutes: [\"minute\", \"min.\"],\r\n    seconds: [\"second\", \"sec.\"]\r\n  };\r\n  const lastable = [\"hours\", \"minutes\", \"seconds\"].indexOf(unit) === -1;\r\n\r\n  if (numeric === \"auto\" && lastable) {\r\n    const isDay = unit === \"days\";\r\n\r\n    switch (count) {\r\n      case 1:\r\n        return isDay ? \"tomorrow\" : `next ${units[unit][0]}`;\r\n\r\n      case -1:\r\n        return isDay ? \"yesterday\" : `last ${units[unit][0]}`;\r\n\r\n      case 0:\r\n        return isDay ? \"today\" : `this ${units[unit][0]}`;\r\n    }\r\n  }\r\n\r\n  const isInPast = Object.is(count, -0) || count < 0,\r\n        fmtValue = Math.abs(count),\r\n        singular = fmtValue === 1,\r\n        lilUnits = units[unit],\r\n        fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;\r\n  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;\r\n}\r\n\r\nfunction formatString(knownFormat) {\r\n  // these all have the offsets removed because we don't have access to them\r\n  // without all the intl stuff this is backfilling\r\n  const filtered = pick(knownFormat, [\"weekday\", \"era\", \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"timeZoneName\", \"hour12\"]),\r\n        key = stringify(filtered),\r\n        dateTimeHuge = \"EEEE, LLLL d, yyyy, h:mm a\";\r\n\r\n  switch (key) {\r\n    case stringify(DATE_SHORT):\r\n      return \"M/d/yyyy\";\r\n\r\n    case stringify(DATE_MED):\r\n      return \"LLL d, yyyy\";\r\n\r\n    case stringify(DATE_FULL):\r\n      return \"LLLL d, yyyy\";\r\n\r\n    case stringify(DATE_HUGE):\r\n      return \"EEEE, LLLL d, yyyy\";\r\n\r\n    case stringify(TIME_SIMPLE):\r\n      return \"h:mm a\";\r\n\r\n    case stringify(TIME_WITH_SECONDS):\r\n      return \"h:mm:ss a\";\r\n\r\n    case stringify(TIME_WITH_SHORT_OFFSET):\r\n      return \"h:mm a\";\r\n\r\n    case stringify(TIME_WITH_LONG_OFFSET):\r\n      return \"h:mm a\";\r\n\r\n    case stringify(TIME_24_SIMPLE):\r\n      return \"HH:mm\";\r\n\r\n    case stringify(TIME_24_WITH_SECONDS):\r\n      return \"HH:mm:ss\";\r\n\r\n    case stringify(TIME_24_WITH_SHORT_OFFSET):\r\n      return \"HH:mm\";\r\n\r\n    case stringify(TIME_24_WITH_LONG_OFFSET):\r\n      return \"HH:mm\";\r\n\r\n    case stringify(DATETIME_SHORT):\r\n      return \"M/d/yyyy, h:mm a\";\r\n\r\n    case stringify(DATETIME_MED):\r\n      return \"LLL d, yyyy, h:mm a\";\r\n\r\n    case stringify(DATETIME_FULL):\r\n      return \"LLLL d, yyyy, h:mm a\";\r\n\r\n    case stringify(DATETIME_HUGE):\r\n      return dateTimeHuge;\r\n\r\n    case stringify(DATETIME_SHORT_WITH_SECONDS):\r\n      return \"M/d/yyyy, h:mm:ss a\";\r\n\r\n    case stringify(DATETIME_MED_WITH_SECONDS):\r\n      return \"LLL d, yyyy, h:mm:ss a\";\r\n\r\n    case stringify(DATETIME_MED_WITH_WEEKDAY):\r\n      return \"EEE, d LLL yyyy, h:mm a\";\r\n\r\n    case stringify(DATETIME_FULL_WITH_SECONDS):\r\n      return \"LLLL d, yyyy, h:mm:ss a\";\r\n\r\n    case stringify(DATETIME_HUGE_WITH_SECONDS):\r\n      return \"EEEE, LLLL d, yyyy, h:mm:ss a\";\r\n\r\n    default:\r\n      return dateTimeHuge;\r\n  }\r\n}\r\n\r\nfunction stringifyTokens(splits, tokenToString) {\r\n  let s = \"\";\r\n\r\n  for (const token of splits) {\r\n    if (token.literal) {\r\n      s += token.val;\r\n    } else {\r\n      s += tokenToString(token.val);\r\n    }\r\n  }\r\n\r\n  return s;\r\n}\r\n\r\nconst macroTokenToFormatOpts = {\r\n  D: DATE_SHORT,\r\n  DD: DATE_MED,\r\n  DDD: DATE_FULL,\r\n  DDDD: DATE_HUGE,\r\n  t: TIME_SIMPLE,\r\n  tt: TIME_WITH_SECONDS,\r\n  ttt: TIME_WITH_SHORT_OFFSET,\r\n  tttt: TIME_WITH_LONG_OFFSET,\r\n  T: TIME_24_SIMPLE,\r\n  TT: TIME_24_WITH_SECONDS,\r\n  TTT: TIME_24_WITH_SHORT_OFFSET,\r\n  TTTT: TIME_24_WITH_LONG_OFFSET,\r\n  f: DATETIME_SHORT,\r\n  ff: DATETIME_MED,\r\n  fff: DATETIME_FULL,\r\n  ffff: DATETIME_HUGE,\r\n  F: DATETIME_SHORT_WITH_SECONDS,\r\n  FF: DATETIME_MED_WITH_SECONDS,\r\n  FFF: DATETIME_FULL_WITH_SECONDS,\r\n  FFFF: DATETIME_HUGE_WITH_SECONDS\r\n};\r\n/**\r\n * @private\r\n */\r\n\r\nclass Formatter {\r\n  static create(locale, opts = {}) {\r\n    return new Formatter(locale, opts);\r\n  }\r\n\r\n  static parseFormat(fmt) {\r\n    let current = null,\r\n        currentFull = \"\",\r\n        bracketed = false;\r\n    const splits = [];\r\n\r\n    for (let i = 0; i < fmt.length; i++) {\r\n      const c = fmt.charAt(i);\r\n\r\n      if (c === \"'\") {\r\n        if (currentFull.length > 0) {\r\n          splits.push({\r\n            literal: bracketed,\r\n            val: currentFull\r\n          });\r\n        }\r\n\r\n        current = null;\r\n        currentFull = \"\";\r\n        bracketed = !bracketed;\r\n      } else if (bracketed) {\r\n        currentFull += c;\r\n      } else if (c === current) {\r\n        currentFull += c;\r\n      } else {\r\n        if (currentFull.length > 0) {\r\n          splits.push({\r\n            literal: false,\r\n            val: currentFull\r\n          });\r\n        }\r\n\r\n        currentFull = c;\r\n        current = c;\r\n      }\r\n    }\r\n\r\n    if (currentFull.length > 0) {\r\n      splits.push({\r\n        literal: bracketed,\r\n        val: currentFull\r\n      });\r\n    }\r\n\r\n    return splits;\r\n  }\r\n\r\n  static macroTokenToFormatOpts(token) {\r\n    return macroTokenToFormatOpts[token];\r\n  }\r\n\r\n  constructor(locale, formatOpts) {\r\n    this.opts = formatOpts;\r\n    this.loc = locale;\r\n    this.systemLoc = null;\r\n  }\r\n\r\n  formatWithSystemDefault(dt, opts) {\r\n    if (this.systemLoc === null) {\r\n      this.systemLoc = this.loc.redefaultToSystem();\r\n    }\r\n\r\n    const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));\r\n    return df.format();\r\n  }\r\n\r\n  formatDateTime(dt, opts = {}) {\r\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\r\n    return df.format();\r\n  }\r\n\r\n  formatDateTimeParts(dt, opts = {}) {\r\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\r\n    return df.formatToParts();\r\n  }\r\n\r\n  resolvedOptions(dt, opts = {}) {\r\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\r\n    return df.resolvedOptions();\r\n  }\r\n\r\n  num(n, p = 0) {\r\n    // we get some perf out of doing this here, annoyingly\r\n    if (this.opts.forceSimple) {\r\n      return padStart(n, p);\r\n    }\r\n\r\n    const opts = Object.assign({}, this.opts);\r\n\r\n    if (p > 0) {\r\n      opts.padTo = p;\r\n    }\r\n\r\n    return this.loc.numberFormatter(opts).format(n);\r\n  }\r\n\r\n  formatDateTimeFromString(dt, fmt) {\r\n    const knownEnglish = this.loc.listingMode() === \"en\",\r\n          useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\" && hasFormatToParts(),\r\n          string = (opts, extract) => this.loc.extract(dt, opts, extract),\r\n          formatOffset = opts => {\r\n      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\r\n        return \"Z\";\r\n      }\r\n\r\n      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\r\n    },\r\n          meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string({\r\n      hour: \"numeric\",\r\n      hour12: true\r\n    }, \"dayperiod\"),\r\n          month = (length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {\r\n      month: length\r\n    } : {\r\n      month: length,\r\n      day: \"numeric\"\r\n    }, \"month\"),\r\n          weekday = (length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {\r\n      weekday: length\r\n    } : {\r\n      weekday: length,\r\n      month: \"long\",\r\n      day: \"numeric\"\r\n    }, \"weekday\"),\r\n          maybeMacro = token => {\r\n      const formatOpts = Formatter.macroTokenToFormatOpts(token);\r\n\r\n      if (formatOpts) {\r\n        return this.formatWithSystemDefault(dt, formatOpts);\r\n      } else {\r\n        return token;\r\n      }\r\n    },\r\n          era = length => knownEnglish ? eraForDateTime(dt, length) : string({\r\n      era: length\r\n    }, \"era\"),\r\n          tokenToString = token => {\r\n      // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\r\n      switch (token) {\r\n        // ms\r\n        case \"S\":\r\n          return this.num(dt.millisecond);\r\n\r\n        case \"u\": // falls through\r\n\r\n        case \"SSS\":\r\n          return this.num(dt.millisecond, 3);\r\n        // seconds\r\n\r\n        case \"s\":\r\n          return this.num(dt.second);\r\n\r\n        case \"ss\":\r\n          return this.num(dt.second, 2);\r\n        // minutes\r\n\r\n        case \"m\":\r\n          return this.num(dt.minute);\r\n\r\n        case \"mm\":\r\n          return this.num(dt.minute, 2);\r\n        // hours\r\n\r\n        case \"h\":\r\n          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\r\n\r\n        case \"hh\":\r\n          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\r\n\r\n        case \"H\":\r\n          return this.num(dt.hour);\r\n\r\n        case \"HH\":\r\n          return this.num(dt.hour, 2);\r\n        // offset\r\n\r\n        case \"Z\":\r\n          // like +6\r\n          return formatOffset({\r\n            format: \"narrow\",\r\n            allowZ: this.opts.allowZ\r\n          });\r\n\r\n        case \"ZZ\":\r\n          // like +06:00\r\n          return formatOffset({\r\n            format: \"short\",\r\n            allowZ: this.opts.allowZ\r\n          });\r\n\r\n        case \"ZZZ\":\r\n          // like +0600\r\n          return formatOffset({\r\n            format: \"techie\",\r\n            allowZ: this.opts.allowZ\r\n          });\r\n\r\n        case \"ZZZZ\":\r\n          // like EST\r\n          return dt.zone.offsetName(dt.ts, {\r\n            format: \"short\",\r\n            locale: this.loc.locale\r\n          });\r\n\r\n        case \"ZZZZZ\":\r\n          // like Eastern Standard Time\r\n          return dt.zone.offsetName(dt.ts, {\r\n            format: \"long\",\r\n            locale: this.loc.locale\r\n          });\r\n        // zone\r\n\r\n        case \"z\":\r\n          // like America/New_York\r\n          return dt.zoneName;\r\n        // meridiems\r\n\r\n        case \"a\":\r\n          return meridiem();\r\n        // dates\r\n\r\n        case \"d\":\r\n          return useDateTimeFormatter ? string({\r\n            day: \"numeric\"\r\n          }, \"day\") : this.num(dt.day);\r\n\r\n        case \"dd\":\r\n          return useDateTimeFormatter ? string({\r\n            day: \"2-digit\"\r\n          }, \"day\") : this.num(dt.day, 2);\r\n        // weekdays - standalone\r\n\r\n        case \"c\":\r\n          // like 1\r\n          return this.num(dt.weekday);\r\n\r\n        case \"ccc\":\r\n          // like 'Tues'\r\n          return weekday(\"short\", true);\r\n\r\n        case \"cccc\":\r\n          // like 'Tuesday'\r\n          return weekday(\"long\", true);\r\n\r\n        case \"ccccc\":\r\n          // like 'T'\r\n          return weekday(\"narrow\", true);\r\n        // weekdays - format\r\n\r\n        case \"E\":\r\n          // like 1\r\n          return this.num(dt.weekday);\r\n\r\n        case \"EEE\":\r\n          // like 'Tues'\r\n          return weekday(\"short\", false);\r\n\r\n        case \"EEEE\":\r\n          // like 'Tuesday'\r\n          return weekday(\"long\", false);\r\n\r\n        case \"EEEEE\":\r\n          // like 'T'\r\n          return weekday(\"narrow\", false);\r\n        // months - standalone\r\n\r\n        case \"L\":\r\n          // like 1\r\n          return useDateTimeFormatter ? string({\r\n            month: \"numeric\",\r\n            day: \"numeric\"\r\n          }, \"month\") : this.num(dt.month);\r\n\r\n        case \"LL\":\r\n          // like 01, doesn't seem to work\r\n          return useDateTimeFormatter ? string({\r\n            month: \"2-digit\",\r\n            day: \"numeric\"\r\n          }, \"month\") : this.num(dt.month, 2);\r\n\r\n        case \"LLL\":\r\n          // like Jan\r\n          return month(\"short\", true);\r\n\r\n        case \"LLLL\":\r\n          // like January\r\n          return month(\"long\", true);\r\n\r\n        case \"LLLLL\":\r\n          // like J\r\n          return month(\"narrow\", true);\r\n        // months - format\r\n\r\n        case \"M\":\r\n          // like 1\r\n          return useDateTimeFormatter ? string({\r\n            month: \"numeric\"\r\n          }, \"month\") : this.num(dt.month);\r\n\r\n        case \"MM\":\r\n          // like 01\r\n          return useDateTimeFormatter ? string({\r\n            month: \"2-digit\"\r\n          }, \"month\") : this.num(dt.month, 2);\r\n\r\n        case \"MMM\":\r\n          // like Jan\r\n          return month(\"short\", false);\r\n\r\n        case \"MMMM\":\r\n          // like January\r\n          return month(\"long\", false);\r\n\r\n        case \"MMMMM\":\r\n          // like J\r\n          return month(\"narrow\", false);\r\n        // years\r\n\r\n        case \"y\":\r\n          // like 2014\r\n          return useDateTimeFormatter ? string({\r\n            year: \"numeric\"\r\n          }, \"year\") : this.num(dt.year);\r\n\r\n        case \"yy\":\r\n          // like 14\r\n          return useDateTimeFormatter ? string({\r\n            year: \"2-digit\"\r\n          }, \"year\") : this.num(dt.year.toString().slice(-2), 2);\r\n\r\n        case \"yyyy\":\r\n          // like 0012\r\n          return useDateTimeFormatter ? string({\r\n            year: \"numeric\"\r\n          }, \"year\") : this.num(dt.year, 4);\r\n\r\n        case \"yyyyyy\":\r\n          // like 000012\r\n          return useDateTimeFormatter ? string({\r\n            year: \"numeric\"\r\n          }, \"year\") : this.num(dt.year, 6);\r\n        // eras\r\n\r\n        case \"G\":\r\n          // like AD\r\n          return era(\"short\");\r\n\r\n        case \"GG\":\r\n          // like Anno Domini\r\n          return era(\"long\");\r\n\r\n        case \"GGGGG\":\r\n          return era(\"narrow\");\r\n\r\n        case \"kk\":\r\n          return this.num(dt.weekYear.toString().slice(-2), 2);\r\n\r\n        case \"kkkk\":\r\n          return this.num(dt.weekYear, 4);\r\n\r\n        case \"W\":\r\n          return this.num(dt.weekNumber);\r\n\r\n        case \"WW\":\r\n          return this.num(dt.weekNumber, 2);\r\n\r\n        case \"o\":\r\n          return this.num(dt.ordinal);\r\n\r\n        case \"ooo\":\r\n          return this.num(dt.ordinal, 3);\r\n\r\n        case \"q\":\r\n          // like 1\r\n          return this.num(dt.quarter);\r\n\r\n        case \"qq\":\r\n          // like 01\r\n          return this.num(dt.quarter, 2);\r\n\r\n        case \"X\":\r\n          return this.num(Math.floor(dt.ts / 1000));\r\n\r\n        case \"x\":\r\n          return this.num(dt.ts);\r\n\r\n        default:\r\n          return maybeMacro(token);\r\n      }\r\n    };\r\n\r\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\r\n  }\r\n\r\n  formatDurationFromString(dur, fmt) {\r\n    const tokenToField = token => {\r\n      switch (token[0]) {\r\n        case \"S\":\r\n          return \"millisecond\";\r\n\r\n        case \"s\":\r\n          return \"second\";\r\n\r\n        case \"m\":\r\n          return \"minute\";\r\n\r\n        case \"h\":\r\n          return \"hour\";\r\n\r\n        case \"d\":\r\n          return \"day\";\r\n\r\n        case \"M\":\r\n          return \"month\";\r\n\r\n        case \"y\":\r\n          return \"year\";\r\n\r\n        default:\r\n          return null;\r\n      }\r\n    },\r\n          tokenToString = lildur => token => {\r\n      const mapped = tokenToField(token);\r\n\r\n      if (mapped) {\r\n        return this.num(lildur.get(mapped), token.length);\r\n      } else {\r\n        return token;\r\n      }\r\n    },\r\n          tokens = Formatter.parseFormat(fmt),\r\n          realTokens = tokens.reduce((found, {\r\n      literal,\r\n      val\r\n    }) => literal ? found : found.concat(val), []),\r\n          collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\r\n\r\n    return stringifyTokens(tokens, tokenToString(collapsed));\r\n  }\r\n\r\n}\r\n\r\nclass Invalid {\r\n  constructor(reason, explanation) {\r\n    this.reason = reason;\r\n    this.explanation = explanation;\r\n  }\r\n\r\n  toMessage() {\r\n    if (this.explanation) {\r\n      return `${this.reason}: ${this.explanation}`;\r\n    } else {\r\n      return this.reason;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction _objectWithoutPropertiesLoose(source, excluded) {\r\n  if (source == null) return {};\r\n  var target = {};\r\n  var sourceKeys = Object.keys(source);\r\n  var key, i;\r\n\r\n  for (i = 0; i < sourceKeys.length; i++) {\r\n    key = sourceKeys[i];\r\n    if (excluded.indexOf(key) >= 0) continue;\r\n    target[key] = source[key];\r\n  }\r\n\r\n  return target;\r\n}\r\n/* eslint no-unused-vars: \"off\" */\r\n\r\n/**\r\n * @interface\r\n */\r\n\r\n\r\nclass Zone {\r\n  /**\r\n   * The type of zone\r\n   * @abstract\r\n   * @type {string}\r\n   */\r\n  get type() {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * The name of this zone.\r\n   * @abstract\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get name() {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * Returns whether the offset is known to be fixed for the whole year.\r\n   * @abstract\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get universal() {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * Returns the offset's common name (such as EST) at the specified timestamp\r\n   * @abstract\r\n   * @param {number} ts - Epoch milliseconds for which to get the name\r\n   * @param {Object} opts - Options to affect the format\r\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\r\n   * @param {string} opts.locale - What locale to return the offset name in.\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  offsetName(ts, opts) {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * Returns the offset's value as a string\r\n   * @abstract\r\n   * @param {number} ts - Epoch milliseconds for which to get the offset\r\n   * @param {string} format - What style of offset to return.\r\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  formatOffset(ts, format) {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * Return the offset in minutes for this zone at the specified timestamp.\r\n   * @abstract\r\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  offset(ts) {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * Return whether this Zone is equal to another zone\r\n   * @abstract\r\n   * @param {Zone} otherZone - the zone to compare\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  equals(otherZone) {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n  /**\r\n   * Return whether this Zone is valid.\r\n   * @abstract\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get isValid() {\r\n    throw new ZoneIsAbstractError();\r\n  }\r\n\r\n}\r\n\r\nlet singleton = null;\r\n/**\r\n * Represents the local zone for this Javascript environment.\r\n * @implements {Zone}\r\n */\r\n\r\nclass LocalZone extends Zone {\r\n  /**\r\n   * Get a singleton instance of the local zone\r\n   * @return {LocalZone}\r\n   */\r\n  static get instance() {\r\n    if (singleton === null) {\r\n      singleton = new LocalZone();\r\n    }\r\n\r\n    return singleton;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get type() {\r\n    return \"local\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get name() {\r\n    if (hasIntl()) {\r\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    } else return \"local\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get universal() {\r\n    return false;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offsetName(ts, {\r\n    format,\r\n    locale\r\n  }) {\r\n    return parseZoneInfo(ts, format, locale);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  formatOffset(ts, format) {\r\n    return formatOffset(this.offset(ts), format);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offset(ts) {\r\n    return -new Date(ts).getTimezoneOffset();\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  equals(otherZone) {\r\n    return otherZone.type === \"local\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get isValid() {\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nconst matchingRegex = RegExp(`^${ianaRegex.source}$`);\r\nlet dtfCache = {};\r\n\r\nfunction makeDTF(zone) {\r\n  if (!dtfCache[zone]) {\r\n    dtfCache[zone] = new Intl.DateTimeFormat(\"en-US\", {\r\n      hour12: false,\r\n      timeZone: zone,\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\"\r\n    });\r\n  }\r\n\r\n  return dtfCache[zone];\r\n}\r\n\r\nconst typeToPos = {\r\n  year: 0,\r\n  month: 1,\r\n  day: 2,\r\n  hour: 3,\r\n  minute: 4,\r\n  second: 5\r\n};\r\n\r\nfunction hackyOffset(dtf, date) {\r\n  const formatted = dtf.format(date).replace(/\\u200E/g, \"\"),\r\n        parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\r\n        [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\r\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\r\n}\r\n\r\nfunction partsOffset(dtf, date) {\r\n  const formatted = dtf.formatToParts(date),\r\n        filled = [];\r\n\r\n  for (let i = 0; i < formatted.length; i++) {\r\n    const {\r\n      type,\r\n      value\r\n    } = formatted[i],\r\n          pos = typeToPos[type];\r\n\r\n    if (!isUndefined(pos)) {\r\n      filled[pos] = parseInt(value, 10);\r\n    }\r\n  }\r\n\r\n  return filled;\r\n}\r\n\r\nlet ianaZoneCache = {};\r\n/**\r\n * A zone identified by an IANA identifier, like America/New_York\r\n * @implements {Zone}\r\n */\r\n\r\nclass IANAZone extends Zone {\r\n  /**\r\n   * @param {string} name - Zone name\r\n   * @return {IANAZone}\r\n   */\r\n  static create(name) {\r\n    if (!ianaZoneCache[name]) {\r\n      ianaZoneCache[name] = new IANAZone(name);\r\n    }\r\n\r\n    return ianaZoneCache[name];\r\n  }\r\n  /**\r\n   * Reset local caches. Should only be necessary in testing scenarios.\r\n   * @return {void}\r\n   */\r\n\r\n\r\n  static resetCache() {\r\n    ianaZoneCache = {};\r\n    dtfCache = {};\r\n  }\r\n  /**\r\n   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.\r\n   * @param {string} s - The string to check validity on\r\n   * @example IANAZone.isValidSpecifier(\"America/New_York\") //=> true\r\n   * @example IANAZone.isValidSpecifier(\"Fantasia/Castle\") //=> true\r\n   * @example IANAZone.isValidSpecifier(\"Sport~~blorp\") //=> false\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  static isValidSpecifier(s) {\r\n    return !!(s && s.match(matchingRegex));\r\n  }\r\n  /**\r\n   * Returns whether the provided string identifies a real zone\r\n   * @param {string} zone - The string to check\r\n   * @example IANAZone.isValidZone(\"America/New_York\") //=> true\r\n   * @example IANAZone.isValidZone(\"Fantasia/Castle\") //=> false\r\n   * @example IANAZone.isValidZone(\"Sport~~blorp\") //=> false\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  static isValidZone(zone) {\r\n    try {\r\n      new Intl.DateTimeFormat(\"en-US\", {\r\n        timeZone: zone\r\n      }).format();\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  } // Etc/GMT+8 -> -480\r\n\r\n  /** @ignore */\r\n\r\n\r\n  static parseGMTOffset(specifier) {\r\n    if (specifier) {\r\n      const match = specifier.match(/^Etc\\/GMT([+-]\\d{1,2})$/i);\r\n\r\n      if (match) {\r\n        return -60 * parseInt(match[1]);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(name) {\r\n    super();\r\n    /** @private **/\r\n\r\n    this.zoneName = name;\r\n    /** @private **/\r\n\r\n    this.valid = IANAZone.isValidZone(name);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get type() {\r\n    return \"iana\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get name() {\r\n    return this.zoneName;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get universal() {\r\n    return false;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offsetName(ts, {\r\n    format,\r\n    locale\r\n  }) {\r\n    return parseZoneInfo(ts, format, locale, this.name);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  formatOffset(ts, format) {\r\n    return formatOffset(this.offset(ts), format);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offset(ts) {\r\n    const date = new Date(ts),\r\n          dtf = makeDTF(this.name),\r\n          [year, month, day, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date),\r\n          // work around https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat\r\n    adjustedHour = hour === 24 ? 0 : hour;\r\n    const asUTC = objToLocalTS({\r\n      year,\r\n      month,\r\n      day,\r\n      hour: adjustedHour,\r\n      minute,\r\n      second,\r\n      millisecond: 0\r\n    });\r\n    let asTS = +date;\r\n    const over = asTS % 1000;\r\n    asTS -= over >= 0 ? over : 1000 + over;\r\n    return (asUTC - asTS) / (60 * 1000);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  equals(otherZone) {\r\n    return otherZone.type === \"iana\" && otherZone.name === this.name;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get isValid() {\r\n    return this.valid;\r\n  }\r\n\r\n}\r\n\r\nlet singleton$1 = null;\r\n/**\r\n * A zone with a fixed offset (meaning no DST)\r\n * @implements {Zone}\r\n */\r\n\r\nclass FixedOffsetZone extends Zone {\r\n  /**\r\n   * Get a singleton instance of UTC\r\n   * @return {FixedOffsetZone}\r\n   */\r\n  static get utcInstance() {\r\n    if (singleton$1 === null) {\r\n      singleton$1 = new FixedOffsetZone(0);\r\n    }\r\n\r\n    return singleton$1;\r\n  }\r\n  /**\r\n   * Get an instance with a specified offset\r\n   * @param {number} offset - The offset in minutes\r\n   * @return {FixedOffsetZone}\r\n   */\r\n\r\n\r\n  static instance(offset) {\r\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\r\n  }\r\n  /**\r\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\r\n   * @param {string} s - The offset string to parse\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\r\n   * @return {FixedOffsetZone}\r\n   */\r\n\r\n\r\n  static parseSpecifier(s) {\r\n    if (s) {\r\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\r\n\r\n      if (r) {\r\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor(offset) {\r\n    super();\r\n    /** @private **/\r\n\r\n    this.fixed = offset;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get type() {\r\n    return \"fixed\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get name() {\r\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offsetName() {\r\n    return this.name;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  formatOffset(ts, format) {\r\n    return formatOffset(this.fixed, format);\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get universal() {\r\n    return true;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offset() {\r\n    return this.fixed;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  equals(otherZone) {\r\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get isValid() {\r\n    return true;\r\n  }\r\n\r\n}\r\n/**\r\n * A zone that failed to parse. You should never need to instantiate this.\r\n * @implements {Zone}\r\n */\r\n\r\n\r\nclass InvalidZone extends Zone {\r\n  constructor(zoneName) {\r\n    super();\r\n    /**  @private */\r\n\r\n    this.zoneName = zoneName;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get type() {\r\n    return \"invalid\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get name() {\r\n    return this.zoneName;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get universal() {\r\n    return false;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offsetName() {\r\n    return null;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  formatOffset() {\r\n    return \"\";\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  offset() {\r\n    return NaN;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  equals() {\r\n    return false;\r\n  }\r\n  /** @override **/\r\n\r\n\r\n  get isValid() {\r\n    return false;\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nfunction normalizeZone(input, defaultZone) {\r\n  let offset;\r\n\r\n  if (isUndefined(input) || input === null) {\r\n    return defaultZone;\r\n  } else if (input instanceof Zone) {\r\n    return input;\r\n  } else if (isString(input)) {\r\n    const lowered = input.toLowerCase();\r\n    if (lowered === \"local\") return defaultZone;else if (lowered === \"utc\" || lowered === \"gmt\") return FixedOffsetZone.utcInstance;else if ((offset = IANAZone.parseGMTOffset(input)) != null) {\r\n      // handle Etc/GMT-4, which V8 chokes on\r\n      return FixedOffsetZone.instance(offset);\r\n    } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);\r\n  } else if (isNumber(input)) {\r\n    return FixedOffsetZone.instance(input);\r\n  } else if (typeof input === \"object\" && input.offset && typeof input.offset === \"number\") {\r\n    // This is dumb, but the instanceof check above doesn't seem to really work\r\n    // so we're duck checking it\r\n    return input;\r\n  } else {\r\n    return new InvalidZone(input);\r\n  }\r\n}\r\n\r\nlet now = () => Date.now(),\r\n    defaultZone = null,\r\n    // not setting this directly to LocalZone.instance bc loading order issues\r\ndefaultLocale = null,\r\n    defaultNumberingSystem = null,\r\n    defaultOutputCalendar = null,\r\n    throwOnInvalid = false;\r\n/**\r\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\r\n */\r\n\r\n\r\nclass Settings {\r\n  /**\r\n   * Get the callback for returning the current timestamp.\r\n   * @type {function}\r\n   */\r\n  static get now() {\r\n    return now;\r\n  }\r\n  /**\r\n   * Set the callback for returning the current timestamp.\r\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\r\n   * @type {function}\r\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\r\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\r\n   */\r\n\r\n\r\n  static set now(n) {\r\n    now = n;\r\n  }\r\n  /**\r\n   * Get the default time zone to create DateTimes in.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static get defaultZoneName() {\r\n    return Settings.defaultZone.name;\r\n  }\r\n  /**\r\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static set defaultZoneName(z) {\r\n    if (!z) {\r\n      defaultZone = null;\r\n    } else {\r\n      defaultZone = normalizeZone(z);\r\n    }\r\n  }\r\n  /**\r\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\r\n   * @type {Zone}\r\n   */\r\n\r\n\r\n  static get defaultZone() {\r\n    return defaultZone || LocalZone.instance;\r\n  }\r\n  /**\r\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static get defaultLocale() {\r\n    return defaultLocale;\r\n  }\r\n  /**\r\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static set defaultLocale(locale) {\r\n    defaultLocale = locale;\r\n  }\r\n  /**\r\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static get defaultNumberingSystem() {\r\n    return defaultNumberingSystem;\r\n  }\r\n  /**\r\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static set defaultNumberingSystem(numberingSystem) {\r\n    defaultNumberingSystem = numberingSystem;\r\n  }\r\n  /**\r\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static get defaultOutputCalendar() {\r\n    return defaultOutputCalendar;\r\n  }\r\n  /**\r\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  static set defaultOutputCalendar(outputCalendar) {\r\n    defaultOutputCalendar = outputCalendar;\r\n  }\r\n  /**\r\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  static get throwOnInvalid() {\r\n    return throwOnInvalid;\r\n  }\r\n  /**\r\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  static set throwOnInvalid(t) {\r\n    throwOnInvalid = t;\r\n  }\r\n  /**\r\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\r\n   * @return {void}\r\n   */\r\n\r\n\r\n  static resetCaches() {\r\n    Locale.resetCache();\r\n    IANAZone.resetCache();\r\n  }\r\n\r\n}\r\n\r\nlet intlDTCache = {};\r\n\r\nfunction getCachedDTF(locString, opts = {}) {\r\n  const key = JSON.stringify([locString, opts]);\r\n  let dtf = intlDTCache[key];\r\n\r\n  if (!dtf) {\r\n    dtf = new Intl.DateTimeFormat(locString, opts);\r\n    intlDTCache[key] = dtf;\r\n  }\r\n\r\n  return dtf;\r\n}\r\n\r\nlet intlNumCache = {};\r\n\r\nfunction getCachedINF(locString, opts = {}) {\r\n  const key = JSON.stringify([locString, opts]);\r\n  let inf = intlNumCache[key];\r\n\r\n  if (!inf) {\r\n    inf = new Intl.NumberFormat(locString, opts);\r\n    intlNumCache[key] = inf;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\nlet intlRelCache = {};\r\n\r\nfunction getCachedRTF(locString, opts = {}) {\r\n  const cacheKeyOpts = _objectWithoutPropertiesLoose(opts, [\"base\"]); // exclude `base` from the options\r\n\r\n\r\n  const key = JSON.stringify([locString, cacheKeyOpts]);\r\n  let inf = intlRelCache[key];\r\n\r\n  if (!inf) {\r\n    inf = new Intl.RelativeTimeFormat(locString, opts);\r\n    intlRelCache[key] = inf;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\nlet sysLocaleCache = null;\r\n\r\nfunction systemLocale() {\r\n  if (sysLocaleCache) {\r\n    return sysLocaleCache;\r\n  } else if (hasIntl()) {\r\n    const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to \"und\". Override that because that is dumb\r\n\r\n    sysLocaleCache = !computedSys || computedSys === \"und\" ? \"en-US\" : computedSys;\r\n    return sysLocaleCache;\r\n  } else {\r\n    sysLocaleCache = \"en-US\";\r\n    return sysLocaleCache;\r\n  }\r\n}\r\n\r\nfunction parseLocaleString(localeStr) {\r\n  // I really want to avoid writing a BCP 47 parser\r\n  // see, e.g. https://github.com/wooorm/bcp-47\r\n  // Instead, we'll do this:\r\n  // a) if the string has no -u extensions, just leave it alone\r\n  // b) if it does, use Intl to resolve everything\r\n  // c) if Intl fails, try again without the -u\r\n  const uIndex = localeStr.indexOf(\"-u-\");\r\n\r\n  if (uIndex === -1) {\r\n    return [localeStr];\r\n  } else {\r\n    let options;\r\n    const smaller = localeStr.substring(0, uIndex);\r\n\r\n    try {\r\n      options = getCachedDTF(localeStr).resolvedOptions();\r\n    } catch (e) {\r\n      options = getCachedDTF(smaller).resolvedOptions();\r\n    }\r\n\r\n    const {\r\n      numberingSystem,\r\n      calendar\r\n    } = options; // return the smaller one so that we can append the calendar and numbering overrides to it\r\n\r\n    return [smaller, numberingSystem, calendar];\r\n  }\r\n}\r\n\r\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\r\n  if (hasIntl()) {\r\n    if (outputCalendar || numberingSystem) {\r\n      localeStr += \"-u\";\r\n\r\n      if (outputCalendar) {\r\n        localeStr += `-ca-${outputCalendar}`;\r\n      }\r\n\r\n      if (numberingSystem) {\r\n        localeStr += `-nu-${numberingSystem}`;\r\n      }\r\n\r\n      return localeStr;\r\n    } else {\r\n      return localeStr;\r\n    }\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction mapMonths(f) {\r\n  const ms = [];\r\n\r\n  for (let i = 1; i <= 12; i++) {\r\n    const dt = DateTime.utc(2016, i, 1);\r\n    ms.push(f(dt));\r\n  }\r\n\r\n  return ms;\r\n}\r\n\r\nfunction mapWeekdays(f) {\r\n  const ms = [];\r\n\r\n  for (let i = 1; i <= 7; i++) {\r\n    const dt = DateTime.utc(2016, 11, 13 + i);\r\n    ms.push(f(dt));\r\n  }\r\n\r\n  return ms;\r\n}\r\n\r\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\r\n  const mode = loc.listingMode(defaultOK);\r\n\r\n  if (mode === \"error\") {\r\n    return null;\r\n  } else if (mode === \"en\") {\r\n    return englishFn(length);\r\n  } else {\r\n    return intlFn(length);\r\n  }\r\n}\r\n\r\nfunction supportsFastNumbers(loc) {\r\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\r\n    return false;\r\n  } else {\r\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\r\n  }\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass PolyNumberFormatter {\r\n  constructor(intl, forceSimple, opts) {\r\n    this.padTo = opts.padTo || 0;\r\n    this.floor = opts.floor || false;\r\n\r\n    if (!forceSimple && hasIntl()) {\r\n      const intlOpts = {\r\n        useGrouping: false\r\n      };\r\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\r\n      this.inf = getCachedINF(intl, intlOpts);\r\n    }\r\n  }\r\n\r\n  format(i) {\r\n    if (this.inf) {\r\n      const fixed = this.floor ? Math.floor(i) : i;\r\n      return this.inf.format(fixed);\r\n    } else {\r\n      // to match the browser's numberformatter defaults\r\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\r\n      return padStart(fixed, this.padTo);\r\n    }\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass PolyDateFormatter {\r\n  constructor(dt, intl, opts) {\r\n    this.opts = opts;\r\n    this.hasIntl = hasIntl();\r\n    let z;\r\n\r\n    if (dt.zone.universal && this.hasIntl) {\r\n      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,\r\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.\r\n      // So we have to make do. Two cases:\r\n      // 1. The format options tell us to show the zone. We can't do that, so the best\r\n      // we can do is format the date in UTC.\r\n      // 2. The format options don't tell us to show the zone. Then we can adjust them\r\n      // the time and tell the formatter to show it to us in UTC, so that the time is right\r\n      // and the bad zone doesn't show up.\r\n      // We can clean all this up when Chrome fixes this.\r\n      z = \"UTC\";\r\n\r\n      if (opts.timeZoneName) {\r\n        this.dt = dt;\r\n      } else {\r\n        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\r\n      }\r\n    } else if (dt.zone.type === \"local\") {\r\n      this.dt = dt;\r\n    } else {\r\n      this.dt = dt;\r\n      z = dt.zone.name;\r\n    }\r\n\r\n    if (this.hasIntl) {\r\n      const intlOpts = Object.assign({}, this.opts);\r\n\r\n      if (z) {\r\n        intlOpts.timeZone = z;\r\n      }\r\n\r\n      this.dtf = getCachedDTF(intl, intlOpts);\r\n    }\r\n  }\r\n\r\n  format() {\r\n    if (this.hasIntl) {\r\n      return this.dtf.format(this.dt.toJSDate());\r\n    } else {\r\n      const tokenFormat = formatString(this.opts),\r\n            loc = Locale.create(\"en-US\");\r\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\r\n    }\r\n  }\r\n\r\n  formatToParts() {\r\n    if (this.hasIntl && hasFormatToParts()) {\r\n      return this.dtf.formatToParts(this.dt.toJSDate());\r\n    } else {\r\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\r\n      // and IMO it's too weird to have an uncanny valley like that\r\n      return [];\r\n    }\r\n  }\r\n\r\n  resolvedOptions() {\r\n    if (this.hasIntl) {\r\n      return this.dtf.resolvedOptions();\r\n    } else {\r\n      return {\r\n        locale: \"en-US\",\r\n        numberingSystem: \"latn\",\r\n        outputCalendar: \"gregory\"\r\n      };\r\n    }\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass PolyRelFormatter {\r\n  constructor(intl, isEnglish, opts) {\r\n    this.opts = Object.assign({\r\n      style: \"long\"\r\n    }, opts);\r\n\r\n    if (!isEnglish && hasRelative()) {\r\n      this.rtf = getCachedRTF(intl, opts);\r\n    }\r\n  }\r\n\r\n  format(count, unit) {\r\n    if (this.rtf) {\r\n      return this.rtf.format(count, unit);\r\n    } else {\r\n      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\r\n    }\r\n  }\r\n\r\n  formatToParts(count, unit) {\r\n    if (this.rtf) {\r\n      return this.rtf.formatToParts(count, unit);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nclass Locale {\r\n  static fromOpts(opts) {\r\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\r\n  }\r\n\r\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\r\n    const specifiedLocale = locale || Settings.defaultLocale,\r\n          // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\r\n    localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()),\r\n          numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\r\n          outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\r\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\r\n  }\r\n\r\n  static resetCache() {\r\n    sysLocaleCache = null;\r\n    intlDTCache = {};\r\n    intlNumCache = {};\r\n    intlRelCache = {};\r\n  }\r\n\r\n  static fromObject({\r\n    locale,\r\n    numberingSystem,\r\n    outputCalendar\r\n  } = {}) {\r\n    return Locale.create(locale, numberingSystem, outputCalendar);\r\n  }\r\n\r\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\r\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\r\n    this.locale = parsedLocale;\r\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\r\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\r\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\r\n    this.weekdaysCache = {\r\n      format: {},\r\n      standalone: {}\r\n    };\r\n    this.monthsCache = {\r\n      format: {},\r\n      standalone: {}\r\n    };\r\n    this.meridiemCache = null;\r\n    this.eraCache = {};\r\n    this.specifiedLocale = specifiedLocale;\r\n    this.fastNumbersCached = null;\r\n  }\r\n\r\n  get fastNumbers() {\r\n    if (this.fastNumbersCached == null) {\r\n      this.fastNumbersCached = supportsFastNumbers(this);\r\n    }\r\n\r\n    return this.fastNumbersCached;\r\n  }\r\n\r\n  listingMode(defaultOK = true) {\r\n    const intl = hasIntl(),\r\n          hasFTP = intl && hasFormatToParts(),\r\n          isActuallyEn = this.isEnglish(),\r\n          hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\r\n\r\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\r\n      return \"error\";\r\n    } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {\r\n      return \"en\";\r\n    } else {\r\n      return \"intl\";\r\n    }\r\n  }\r\n\r\n  clone(alts) {\r\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\r\n      return this;\r\n    } else {\r\n      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);\r\n    }\r\n  }\r\n\r\n  redefaultToEN(alts = {}) {\r\n    return this.clone(Object.assign({}, alts, {\r\n      defaultToEN: true\r\n    }));\r\n  }\r\n\r\n  redefaultToSystem(alts = {}) {\r\n    return this.clone(Object.assign({}, alts, {\r\n      defaultToEN: false\r\n    }));\r\n  }\r\n\r\n  months(length, format = false, defaultOK = true) {\r\n    return listStuff(this, length, defaultOK, months, () => {\r\n      const intl = format ? {\r\n        month: length,\r\n        day: \"numeric\"\r\n      } : {\r\n        month: length\r\n      },\r\n            formatStr = format ? \"format\" : \"standalone\";\r\n\r\n      if (!this.monthsCache[formatStr][length]) {\r\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, \"month\"));\r\n      }\r\n\r\n      return this.monthsCache[formatStr][length];\r\n    });\r\n  }\r\n\r\n  weekdays(length, format = false, defaultOK = true) {\r\n    return listStuff(this, length, defaultOK, weekdays, () => {\r\n      const intl = format ? {\r\n        weekday: length,\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n      } : {\r\n        weekday: length\r\n      },\r\n            formatStr = format ? \"format\" : \"standalone\";\r\n\r\n      if (!this.weekdaysCache[formatStr][length]) {\r\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt => this.extract(dt, intl, \"weekday\"));\r\n      }\r\n\r\n      return this.weekdaysCache[formatStr][length];\r\n    });\r\n  }\r\n\r\n  meridiems(defaultOK = true) {\r\n    return listStuff(this, undefined, defaultOK, () => meridiems, () => {\r\n      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\r\n      // for AM and PM. This is probably wrong, but it's makes parsing way easier.\r\n      if (!this.meridiemCache) {\r\n        const intl = {\r\n          hour: \"numeric\",\r\n          hour12: true\r\n        };\r\n        this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(dt => this.extract(dt, intl, \"dayperiod\"));\r\n      }\r\n\r\n      return this.meridiemCache;\r\n    });\r\n  }\r\n\r\n  eras(length, defaultOK = true) {\r\n    return listStuff(this, length, defaultOK, eras, () => {\r\n      const intl = {\r\n        era: length\r\n      }; // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\r\n      // to definitely enumerate them.\r\n\r\n      if (!this.eraCache[length]) {\r\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt => this.extract(dt, intl, \"era\"));\r\n      }\r\n\r\n      return this.eraCache[length];\r\n    });\r\n  }\r\n\r\n  extract(dt, intlOpts, field) {\r\n    const df = this.dtFormatter(dt, intlOpts),\r\n          results = df.formatToParts(),\r\n          matching = results.find(m => m.type.toLowerCase() === field);\r\n    return matching ? matching.value : null;\r\n  }\r\n\r\n  numberFormatter(opts = {}) {\r\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\r\n    // (in contrast, the rest of the condition is used heavily)\r\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\r\n  }\r\n\r\n  dtFormatter(dt, intlOpts = {}) {\r\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\r\n  }\r\n\r\n  relFormatter(opts = {}) {\r\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\r\n  }\r\n\r\n  isEnglish() {\r\n    return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\r\n  }\r\n\r\n  equals(other) {\r\n    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\r\n  }\r\n\r\n}\r\n/*\r\n * This file handles parsing for well-specified formats. Here's how it works:\r\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\r\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\r\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\r\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\r\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\r\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\r\n */\r\n\r\n\r\nfunction combineRegexes(...regexes) {\r\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\r\n  return RegExp(`^${full}$`);\r\n}\r\n\r\nfunction combineExtractors(...extractors) {\r\n  return m => extractors.reduce(([mergedVals, mergedZone, cursor], ex) => {\r\n    const [val, zone, next] = ex(m, cursor);\r\n    return [Object.assign(mergedVals, val), mergedZone || zone, next];\r\n  }, [{}, null, 1]).slice(0, 2);\r\n}\r\n\r\nfunction parse(s, ...patterns) {\r\n  if (s == null) {\r\n    return [null, null];\r\n  }\r\n\r\n  for (const [regex, extractor] of patterns) {\r\n    const m = regex.exec(s);\r\n\r\n    if (m) {\r\n      return extractor(m);\r\n    }\r\n  }\r\n\r\n  return [null, null];\r\n}\r\n\r\nfunction simpleParse(...keys) {\r\n  return (match, cursor) => {\r\n    const ret = {};\r\n    let i;\r\n\r\n    for (i = 0; i < keys.length; i++) {\r\n      ret[keys[i]] = parseInteger(match[cursor + i]);\r\n    }\r\n\r\n    return [ret, null, cursor + i];\r\n  };\r\n} // ISO and SQL parsing\r\n\r\n\r\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\r\n      isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,9}))?)?)?/,\r\n      isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\r\n      isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\r\n      isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\r\n      isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\r\n      isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\r\n      extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\r\n      extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\r\n      sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/,\r\n      // dumbed-down version of the ISO one\r\nsqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`),\r\n      sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\r\n\r\nfunction int(match, pos, fallback) {\r\n  const m = match[pos];\r\n  return isUndefined(m) ? fallback : parseInteger(m);\r\n}\r\n\r\nfunction extractISOYmd(match, cursor) {\r\n  const item = {\r\n    year: int(match, cursor),\r\n    month: int(match, cursor + 1, 1),\r\n    day: int(match, cursor + 2, 1)\r\n  };\r\n  return [item, null, cursor + 3];\r\n}\r\n\r\nfunction extractISOTime(match, cursor) {\r\n  const item = {\r\n    hour: int(match, cursor, 0),\r\n    minute: int(match, cursor + 1, 0),\r\n    second: int(match, cursor + 2, 0),\r\n    millisecond: parseMillis(match[cursor + 3])\r\n  };\r\n  return [item, null, cursor + 4];\r\n}\r\n\r\nfunction extractISOOffset(match, cursor) {\r\n  const local = !match[cursor] && !match[cursor + 1],\r\n        fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\r\n        zone = local ? null : FixedOffsetZone.instance(fullOffset);\r\n  return [{}, zone, cursor + 3];\r\n}\r\n\r\nfunction extractIANAZone(match, cursor) {\r\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\r\n  return [{}, zone, cursor + 1];\r\n} // ISO duration parsing\r\n\r\n\r\nconst isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\r\n\r\nfunction extractISODuration(match) {\r\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match;\r\n  const hasNegativePrefix = s[0] === \"-\";\r\n\r\n  const maybeNegate = num => num && hasNegativePrefix ? -num : num;\r\n\r\n  return [{\r\n    years: maybeNegate(parseInteger(yearStr)),\r\n    months: maybeNegate(parseInteger(monthStr)),\r\n    weeks: maybeNegate(parseInteger(weekStr)),\r\n    days: maybeNegate(parseInteger(dayStr)),\r\n    hours: maybeNegate(parseInteger(hourStr)),\r\n    minutes: maybeNegate(parseInteger(minuteStr)),\r\n    seconds: maybeNegate(parseInteger(secondStr)),\r\n    milliseconds: maybeNegate(parseMillis(millisecondsStr))\r\n  }];\r\n} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\r\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\r\n// I'm just going to ignore that\r\n\r\n\r\nconst obsOffsets = {\r\n  GMT: 0,\r\n  EDT: -4 * 60,\r\n  EST: -5 * 60,\r\n  CDT: -5 * 60,\r\n  CST: -6 * 60,\r\n  MDT: -6 * 60,\r\n  MST: -7 * 60,\r\n  PDT: -7 * 60,\r\n  PST: -8 * 60\r\n};\r\n\r\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\r\n  const result = {\r\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\r\n    month: monthsShort.indexOf(monthStr) + 1,\r\n    day: parseInteger(dayStr),\r\n    hour: parseInteger(hourStr),\r\n    minute: parseInteger(minuteStr)\r\n  };\r\n  if (secondStr) result.second = parseInteger(secondStr);\r\n\r\n  if (weekdayStr) {\r\n    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;\r\n  }\r\n\r\n  return result;\r\n} // RFC 2822/5322\r\n\r\n\r\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\r\n\r\nfunction extractRFC2822(match) {\r\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr, obsOffset, milOffset, offHourStr, offMinuteStr] = match,\r\n        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\r\n  let offset;\r\n\r\n  if (obsOffset) {\r\n    offset = obsOffsets[obsOffset];\r\n  } else if (milOffset) {\r\n    offset = 0;\r\n  } else {\r\n    offset = signedOffset(offHourStr, offMinuteStr);\r\n  }\r\n\r\n  return [result, new FixedOffsetZone(offset)];\r\n}\r\n\r\nfunction preprocessRFC2822(s) {\r\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\r\n  return s.replace(/\\([^)]*\\)|[\\n\\t]/g, \" \").replace(/(\\s\\s+)/g, \" \").trim();\r\n} // http date\r\n\r\n\r\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\r\n      rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\r\n      ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\r\n\r\nfunction extractRFC1123Or850(match) {\r\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\r\n        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\r\n  return [result, FixedOffsetZone.utcInstance];\r\n}\r\n\r\nfunction extractASCII(match) {\r\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\r\n        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\r\n  return [result, FixedOffsetZone.utcInstance];\r\n}\r\n\r\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\r\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\r\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\r\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\r\nconst extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);\r\nconst extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);\r\nconst extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\r\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\r\n/**\r\n * @private\r\n */\r\n\r\nfunction parseISODate(s) {\r\n  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);\r\n}\r\n\r\nfunction parseRFC2822Date(s) {\r\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\r\n}\r\n\r\nfunction parseHTTPDate(s) {\r\n  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);\r\n}\r\n\r\nfunction parseISODuration(s) {\r\n  return parse(s, [isoDuration, extractISODuration]);\r\n}\r\n\r\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\r\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\r\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);\r\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);\r\n\r\nfunction parseSQL(s) {\r\n  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);\r\n}\r\n\r\nconst INVALID = \"Invalid Duration\"; // unit conversion constants\r\n\r\nconst lowOrderMatrix = {\r\n  weeks: {\r\n    days: 7,\r\n    hours: 7 * 24,\r\n    minutes: 7 * 24 * 60,\r\n    seconds: 7 * 24 * 60 * 60,\r\n    milliseconds: 7 * 24 * 60 * 60 * 1000\r\n  },\r\n  days: {\r\n    hours: 24,\r\n    minutes: 24 * 60,\r\n    seconds: 24 * 60 * 60,\r\n    milliseconds: 24 * 60 * 60 * 1000\r\n  },\r\n  hours: {\r\n    minutes: 60,\r\n    seconds: 60 * 60,\r\n    milliseconds: 60 * 60 * 1000\r\n  },\r\n  minutes: {\r\n    seconds: 60,\r\n    milliseconds: 60 * 1000\r\n  },\r\n  seconds: {\r\n    milliseconds: 1000\r\n  }\r\n},\r\n      casualMatrix = Object.assign({\r\n  years: {\r\n    months: 12,\r\n    weeks: 52,\r\n    days: 365,\r\n    hours: 365 * 24,\r\n    minutes: 365 * 24 * 60,\r\n    seconds: 365 * 24 * 60 * 60,\r\n    milliseconds: 365 * 24 * 60 * 60 * 1000\r\n  },\r\n  quarters: {\r\n    months: 3,\r\n    weeks: 13,\r\n    days: 91,\r\n    hours: 91 * 24,\r\n    minutes: 91 * 24 * 60,\r\n    milliseconds: 91 * 24 * 60 * 60 * 1000\r\n  },\r\n  months: {\r\n    weeks: 4,\r\n    days: 30,\r\n    hours: 30 * 24,\r\n    minutes: 30 * 24 * 60,\r\n    seconds: 30 * 24 * 60 * 60,\r\n    milliseconds: 30 * 24 * 60 * 60 * 1000\r\n  }\r\n}, lowOrderMatrix),\r\n      daysInYearAccurate = 146097.0 / 400,\r\n      daysInMonthAccurate = 146097.0 / 4800,\r\n      accurateMatrix = Object.assign({\r\n  years: {\r\n    months: 12,\r\n    weeks: daysInYearAccurate / 7,\r\n    days: daysInYearAccurate,\r\n    hours: daysInYearAccurate * 24,\r\n    minutes: daysInYearAccurate * 24 * 60,\r\n    seconds: daysInYearAccurate * 24 * 60 * 60,\r\n    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\r\n  },\r\n  quarters: {\r\n    months: 3,\r\n    weeks: daysInYearAccurate / 28,\r\n    days: daysInYearAccurate / 4,\r\n    hours: daysInYearAccurate * 24 / 4,\r\n    minutes: daysInYearAccurate * 24 * 60 / 4,\r\n    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,\r\n    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4\r\n  },\r\n  months: {\r\n    weeks: daysInMonthAccurate / 7,\r\n    days: daysInMonthAccurate,\r\n    hours: daysInMonthAccurate * 24,\r\n    minutes: daysInMonthAccurate * 24 * 60,\r\n    seconds: daysInMonthAccurate * 24 * 60 * 60,\r\n    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000\r\n  }\r\n}, lowOrderMatrix); // units ordered by size\r\n\r\nconst orderedUnits = [\"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\r\nconst reverseUnits = orderedUnits.slice(0).reverse(); // clone really means \"create another instance just like this one, but with these changes\"\r\n\r\nfunction clone(dur, alts, clear = false) {\r\n  // deep merge for vals\r\n  const conf = {\r\n    values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),\r\n    loc: dur.loc.clone(alts.loc),\r\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\r\n  };\r\n  return new Duration(conf);\r\n}\r\n\r\nfunction antiTrunc(n) {\r\n  return n < 0 ? Math.floor(n) : Math.ceil(n);\r\n} // NB: mutates parameters\r\n\r\n\r\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\r\n  const conv = matrix[toUnit][fromUnit],\r\n        raw = fromMap[fromUnit] / conv,\r\n        sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\r\n        // ok, so this is wild, but see the matrix in the tests\r\n  added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\r\n  toMap[toUnit] += added;\r\n  fromMap[fromUnit] -= added * conv;\r\n} // NB: mutates parameters\r\n\r\n\r\nfunction normalizeValues(matrix, vals) {\r\n  reverseUnits.reduce((previous, current) => {\r\n    if (!isUndefined(vals[current])) {\r\n      if (previous) {\r\n        convert(matrix, vals, previous, vals, current);\r\n      }\r\n\r\n      return current;\r\n    } else {\r\n      return previous;\r\n    }\r\n  }, null);\r\n}\r\n/**\r\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\r\n *\r\n * Here is a brief overview of commonly used methods and getters in Duration:\r\n *\r\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\r\n * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.\r\n * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.\r\n * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.\r\n * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}\r\n *\r\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\r\n */\r\n\r\n\r\nclass Duration {\r\n  /**\r\n   * @private\r\n   */\r\n  constructor(config) {\r\n    const accurate = config.conversionAccuracy === \"longterm\" || false;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.values = config.values;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.loc = config.loc || Locale.create();\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.conversionAccuracy = accurate ? \"longterm\" : \"casual\";\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.invalid = config.invalid || null;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.isLuxonDuration = true;\r\n  }\r\n  /**\r\n   * Create Duration from a number of milliseconds.\r\n   * @param {number} count of milliseconds\r\n   * @param {Object} opts - options for parsing\r\n   * @param {string} [opts.locale='en-US'] - the locale to use\r\n   * @param {string} opts.numberingSystem - the numbering system to use\r\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  static fromMillis(count, opts) {\r\n    return Duration.fromObject(Object.assign({\r\n      milliseconds: count\r\n    }, opts));\r\n  }\r\n  /**\r\n   * Create a Duration from a Javascript object with keys like 'years' and 'hours.\r\n   * If this object is empty then a zero milliseconds duration is returned.\r\n   * @param {Object} obj - the object to create the DateTime from\r\n   * @param {number} obj.years\r\n   * @param {number} obj.quarters\r\n   * @param {number} obj.months\r\n   * @param {number} obj.weeks\r\n   * @param {number} obj.days\r\n   * @param {number} obj.hours\r\n   * @param {number} obj.minutes\r\n   * @param {number} obj.seconds\r\n   * @param {number} obj.milliseconds\r\n   * @param {string} [obj.locale='en-US'] - the locale to use\r\n   * @param {string} obj.numberingSystem - the numbering system to use\r\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  static fromObject(obj) {\r\n    if (obj == null || typeof obj !== \"object\") {\r\n      throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj === null ? \"null\" : typeof obj}`);\r\n    }\r\n\r\n    return new Duration({\r\n      values: normalizeObject(obj, Duration.normalizeUnit, [\"locale\", \"numberingSystem\", \"conversionAccuracy\", \"zone\" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this\r\n      ]),\r\n      loc: Locale.fromObject(obj),\r\n      conversionAccuracy: obj.conversionAccuracy\r\n    });\r\n  }\r\n  /**\r\n   * Create a Duration from an ISO 8601 duration string.\r\n   * @param {string} text - text to parse\r\n   * @param {Object} opts - options for parsing\r\n   * @param {string} [opts.locale='en-US'] - the locale to use\r\n   * @param {string} opts.numberingSystem - the numbering system to use\r\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\r\n   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }\r\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\r\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  static fromISO(text, opts) {\r\n    const [parsed] = parseISODuration(text);\r\n\r\n    if (parsed) {\r\n      const obj = Object.assign(parsed, opts);\r\n      return Duration.fromObject(obj);\r\n    } else {\r\n      return Duration.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\r\n    }\r\n  }\r\n  /**\r\n   * Create an invalid Duration.\r\n   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent\r\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  static invalid(reason, explanation = null) {\r\n    if (!reason) {\r\n      throw new InvalidArgumentError(\"need to specify a reason the Duration is invalid\");\r\n    }\r\n\r\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\r\n\r\n    if (Settings.throwOnInvalid) {\r\n      throw new InvalidDurationError(invalid);\r\n    } else {\r\n      return new Duration({\r\n        invalid\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * @private\r\n   */\r\n\r\n\r\n  static normalizeUnit(unit) {\r\n    const normalized = {\r\n      year: \"years\",\r\n      years: \"years\",\r\n      quarter: \"quarters\",\r\n      quarters: \"quarters\",\r\n      month: \"months\",\r\n      months: \"months\",\r\n      week: \"weeks\",\r\n      weeks: \"weeks\",\r\n      day: \"days\",\r\n      days: \"days\",\r\n      hour: \"hours\",\r\n      hours: \"hours\",\r\n      minute: \"minutes\",\r\n      minutes: \"minutes\",\r\n      second: \"seconds\",\r\n      seconds: \"seconds\",\r\n      millisecond: \"milliseconds\",\r\n      milliseconds: \"milliseconds\"\r\n    }[unit ? unit.toLowerCase() : unit];\r\n    if (!normalized) throw new InvalidUnitError(unit);\r\n    return normalized;\r\n  }\r\n  /**\r\n   * Check if an object is a Duration. Works across context boundaries\r\n   * @param {object} o\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  static isDuration(o) {\r\n    return o && o.isLuxonDuration || false;\r\n  }\r\n  /**\r\n   * Get  the locale of a Duration, such 'en-GB'\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get locale() {\r\n    return this.isValid ? this.loc.locale : null;\r\n  }\r\n  /**\r\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\r\n   *\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get numberingSystem() {\r\n    return this.isValid ? this.loc.numberingSystem : null;\r\n  }\r\n  /**\r\n   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:\r\n   * * `S` for milliseconds\r\n   * * `s` for seconds\r\n   * * `m` for minutes\r\n   * * `h` for hours\r\n   * * `d` for days\r\n   * * `M` for months\r\n   * * `y` for years\r\n   * Notes:\r\n   * * Add padding by repeating the token, e.g. \"yy\" pads the years to two digits, \"hhhh\" pads the hours out to four digits\r\n   * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.\r\n   * @param {string} fmt - the format string\r\n   * @param {Object} opts - options\r\n   * @param {boolean} [opts.floor=true] - floor numerical values\r\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"y d s\") //=> \"1 6 2\"\r\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"yy dd sss\") //=> \"01 06 002\"\r\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat(\"M S\") //=> \"12 518402000\"\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toFormat(fmt, opts = {}) {\r\n    // reverse-compat since 1.2; we always round down now, never up, and we do it by default\r\n    const fmtOpts = Object.assign({}, opts, {\r\n      floor: opts.round !== false && opts.floor !== false\r\n    });\r\n    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;\r\n  }\r\n  /**\r\n   * Returns a Javascript object with this Duration's values.\r\n   * @param opts - options for generating the object\r\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\r\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\r\n   * @return {Object}\r\n   */\r\n\r\n\r\n  toObject(opts = {}) {\r\n    if (!this.isValid) return {};\r\n    const base = Object.assign({}, this.values);\r\n\r\n    if (opts.includeConfig) {\r\n      base.conversionAccuracy = this.conversionAccuracy;\r\n      base.numberingSystem = this.loc.numberingSystem;\r\n      base.locale = this.loc.locale;\r\n    }\r\n\r\n    return base;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this Duration.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\r\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\r\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\r\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\r\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\r\n   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISO() {\r\n    // we could use the formatter, but this is an easier way to get the minimum string\r\n    if (!this.isValid) return null;\r\n    let s = \"P\";\r\n    if (this.years !== 0) s += this.years + \"Y\";\r\n    if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + \"M\";\r\n    if (this.weeks !== 0) s += this.weeks + \"W\";\r\n    if (this.days !== 0) s += this.days + \"D\";\r\n    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += \"T\";\r\n    if (this.hours !== 0) s += this.hours + \"H\";\r\n    if (this.minutes !== 0) s += this.minutes + \"M\";\r\n    if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle \"floating point madness\" by removing extra decimal places\r\n      // https://stackoverflow.com/questions/588004/is-floating-point-math-broken\r\n      s += roundTo(this.seconds + this.milliseconds / 1000, 3) + \"S\";\r\n    if (s === \"P\") s += \"T0S\";\r\n    return s;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toJSON() {\r\n    return this.toISO();\r\n  }\r\n  /**\r\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toString() {\r\n    return this.toISO();\r\n  }\r\n  /**\r\n   * Returns an milliseconds value of this Duration.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  valueOf() {\r\n    return this.as(\"milliseconds\");\r\n  }\r\n  /**\r\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\r\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  plus(duration) {\r\n    if (!this.isValid) return this;\r\n    const dur = friendlyDuration(duration),\r\n          result = {};\r\n\r\n    for (const k of orderedUnits) {\r\n      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {\r\n        result[k] = dur.get(k) + this.get(k);\r\n      }\r\n    }\r\n\r\n    return clone(this, {\r\n      values: result\r\n    }, true);\r\n  }\r\n  /**\r\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\r\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  minus(duration) {\r\n    if (!this.isValid) return this;\r\n    const dur = friendlyDuration(duration);\r\n    return this.plus(dur.negate());\r\n  }\r\n  /**\r\n   * Scale this Duration by the specified amount. Return a newly-constructed Duration.\r\n   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.\r\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }\r\n   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === \"hour\" ? x * 2 : x) //=> { hours: 2, minutes: 30 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  mapUnits(fn) {\r\n    if (!this.isValid) return this;\r\n    const result = {};\r\n\r\n    for (const k of Object.keys(this.values)) {\r\n      result[k] = asNumber(fn(this.values[k], k));\r\n    }\r\n\r\n    return clone(this, {\r\n      values: result\r\n    }, true);\r\n  }\r\n  /**\r\n   * Get the value of unit.\r\n   * @param {string} unit - a unit such as 'minute' or 'day'\r\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\r\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\r\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  get(unit) {\r\n    return this[Duration.normalizeUnit(unit)];\r\n  }\r\n  /**\r\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\r\n   * @param {Object} values - a mapping of units to numbers\r\n   * @example dur.set({ years: 2017 })\r\n   * @example dur.set({ hours: 8, minutes: 30 })\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  set(values) {\r\n    if (!this.isValid) return this;\r\n    const mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));\r\n    return clone(this, {\r\n      values: mixed\r\n    });\r\n  }\r\n  /**\r\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\r\n   * @example dur.reconfigure({ locale: 'en-GB' })\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  reconfigure({\r\n    locale,\r\n    numberingSystem,\r\n    conversionAccuracy\r\n  } = {}) {\r\n    const loc = this.loc.clone({\r\n      locale,\r\n      numberingSystem\r\n    }),\r\n          opts = {\r\n      loc\r\n    };\r\n\r\n    if (conversionAccuracy) {\r\n      opts.conversionAccuracy = conversionAccuracy;\r\n    }\r\n\r\n    return clone(this, opts);\r\n  }\r\n  /**\r\n   * Return the length of the duration in the specified unit.\r\n   * @param {string} unit - a unit such as 'minutes' or 'days'\r\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\r\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\r\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  as(unit) {\r\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\r\n  }\r\n  /**\r\n   * Reduce this Duration to its canonical representation in its current units.\r\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\r\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  normalize() {\r\n    if (!this.isValid) return this;\r\n    const vals = this.toObject();\r\n    normalizeValues(this.matrix, vals);\r\n    return clone(this, {\r\n      values: vals\r\n    }, true);\r\n  }\r\n  /**\r\n   * Convert this Duration into its representation in a different set of units.\r\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  shiftTo(...units) {\r\n    if (!this.isValid) return this;\r\n\r\n    if (units.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    units = units.map(u => Duration.normalizeUnit(u));\r\n    const built = {},\r\n          accumulated = {},\r\n          vals = this.toObject();\r\n    let lastUnit;\r\n    normalizeValues(this.matrix, vals);\r\n\r\n    for (const k of orderedUnits) {\r\n      if (units.indexOf(k) >= 0) {\r\n        lastUnit = k;\r\n        let own = 0; // anything we haven't boiled down yet should get boiled to this unit\r\n\r\n        for (const ak in accumulated) {\r\n          own += this.matrix[ak][k] * accumulated[ak];\r\n          accumulated[ak] = 0;\r\n        } // plus anything that's already in this unit\r\n\r\n\r\n        if (isNumber(vals[k])) {\r\n          own += vals[k];\r\n        }\r\n\r\n        const i = Math.trunc(own);\r\n        built[k] = i;\r\n        accumulated[k] = own - i; // we'd like to absorb these fractions in another unit\r\n        // plus anything further down the chain that should be rolled up in to this\r\n\r\n        for (const down in vals) {\r\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\r\n            convert(this.matrix, vals, down, built, k);\r\n          }\r\n        } // otherwise, keep it in the wings to boil it later\r\n\r\n      } else if (isNumber(vals[k])) {\r\n        accumulated[k] = vals[k];\r\n      }\r\n    } // anything leftover becomes the decimal for the last unit\r\n    // lastUnit must be defined since units is not empty\r\n\r\n\r\n    for (const key in accumulated) {\r\n      if (accumulated[key] !== 0) {\r\n        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\r\n      }\r\n    }\r\n\r\n    return clone(this, {\r\n      values: built\r\n    }, true).normalize();\r\n  }\r\n  /**\r\n   * Return the negative of this Duration.\r\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  negate() {\r\n    if (!this.isValid) return this;\r\n    const negated = {};\r\n\r\n    for (const k of Object.keys(this.values)) {\r\n      negated[k] = -this.values[k];\r\n    }\r\n\r\n    return clone(this, {\r\n      values: negated\r\n    }, true);\r\n  }\r\n  /**\r\n   * Get the years.\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get years() {\r\n    return this.isValid ? this.values.years || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the quarters.\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get quarters() {\r\n    return this.isValid ? this.values.quarters || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the months.\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get months() {\r\n    return this.isValid ? this.values.months || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the weeks\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get weeks() {\r\n    return this.isValid ? this.values.weeks || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the days.\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get days() {\r\n    return this.isValid ? this.values.days || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the hours.\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get hours() {\r\n    return this.isValid ? this.values.hours || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the minutes.\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get minutes() {\r\n    return this.isValid ? this.values.minutes || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the seconds.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  get seconds() {\r\n    return this.isValid ? this.values.seconds || 0 : NaN;\r\n  }\r\n  /**\r\n   * Get the milliseconds.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  get milliseconds() {\r\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\r\n  }\r\n  /**\r\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\r\n   * on invalid DateTimes or Intervals.\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  get isValid() {\r\n    return this.invalid === null;\r\n  }\r\n  /**\r\n   * Returns an error code if this Duration became invalid, or null if the Duration is valid\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  get invalidReason() {\r\n    return this.invalid ? this.invalid.reason : null;\r\n  }\r\n  /**\r\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get invalidExplanation() {\r\n    return this.invalid ? this.invalid.explanation : null;\r\n  }\r\n  /**\r\n   * Equality check\r\n   * Two Durations are equal iff they have the same units and the same values for each unit.\r\n   * @param {Duration} other\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  equals(other) {\r\n    if (!this.isValid || !other.isValid) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.loc.equals(other.loc)) {\r\n      return false;\r\n    }\r\n\r\n    for (const u of orderedUnits) {\r\n      if (this.values[u] !== other.values[u]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nfunction friendlyDuration(durationish) {\r\n  if (isNumber(durationish)) {\r\n    return Duration.fromMillis(durationish);\r\n  } else if (Duration.isDuration(durationish)) {\r\n    return durationish;\r\n  } else if (typeof durationish === \"object\") {\r\n    return Duration.fromObject(durationish);\r\n  } else {\r\n    throw new InvalidArgumentError(`Unknown duration argument ${durationish} of type ${typeof durationish}`);\r\n  }\r\n}\r\n\r\nconst INVALID$1 = \"Invalid Interval\"; // checks if the start is equal to or before the end\r\n\r\nfunction validateStartEnd(start, end) {\r\n  if (!start || !start.isValid) {\r\n    return Interval.invalid(\"missing or invalid start\");\r\n  } else if (!end || !end.isValid) {\r\n    return Interval.invalid(\"missing or invalid end\");\r\n  } else if (end < start) {\r\n    return Interval.invalid(\"end before start\", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n/**\r\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\r\n *\r\n * Here is a brief overview of the most commonly used methods and getters in Interval:\r\n *\r\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\r\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\r\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\r\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\r\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\r\n * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.\r\n */\r\n\r\n\r\nclass Interval {\r\n  /**\r\n   * @private\r\n   */\r\n  constructor(config) {\r\n    /**\r\n     * @access private\r\n     */\r\n    this.s = config.start;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.e = config.end;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.invalid = config.invalid || null;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.isLuxonInterval = true;\r\n  }\r\n  /**\r\n   * Create an invalid Interval.\r\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\r\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  static invalid(reason, explanation = null) {\r\n    if (!reason) {\r\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\r\n    }\r\n\r\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\r\n\r\n    if (Settings.throwOnInvalid) {\r\n      throw new InvalidIntervalError(invalid);\r\n    } else {\r\n      return new Interval({\r\n        invalid\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\r\n   * @param {DateTime|Date|Object} start\r\n   * @param {DateTime|Date|Object} end\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  static fromDateTimes(start, end) {\r\n    const builtStart = friendlyDateTime(start),\r\n          builtEnd = friendlyDateTime(end);\r\n    const validateError = validateStartEnd(builtStart, builtEnd);\r\n\r\n    if (validateError == null) {\r\n      return new Interval({\r\n        start: builtStart,\r\n        end: builtEnd\r\n      });\r\n    } else {\r\n      return validateError;\r\n    }\r\n  }\r\n  /**\r\n   * Create an Interval from a start DateTime and a Duration to extend to.\r\n   * @param {DateTime|Date|Object} start\r\n   * @param {Duration|Object|number} duration - the length of the Interval.\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  static after(start, duration) {\r\n    const dur = friendlyDuration(duration),\r\n          dt = friendlyDateTime(start);\r\n    return Interval.fromDateTimes(dt, dt.plus(dur));\r\n  }\r\n  /**\r\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\r\n   * @param {DateTime|Date|Object} end\r\n   * @param {Duration|Object|number} duration - the length of the Interval.\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  static before(end, duration) {\r\n    const dur = friendlyDuration(duration),\r\n          dt = friendlyDateTime(end);\r\n    return Interval.fromDateTimes(dt.minus(dur), dt);\r\n  }\r\n  /**\r\n   * Create an Interval from an ISO 8601 string.\r\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\r\n   * @param {string} text - the ISO string to parse\r\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  static fromISO(text, opts) {\r\n    const [s, e] = (text || \"\").split(\"/\", 2);\r\n\r\n    if (s && e) {\r\n      const start = DateTime.fromISO(s, opts),\r\n            end = DateTime.fromISO(e, opts);\r\n\r\n      if (start.isValid && end.isValid) {\r\n        return Interval.fromDateTimes(start, end);\r\n      }\r\n\r\n      if (start.isValid) {\r\n        const dur = Duration.fromISO(e, opts);\r\n\r\n        if (dur.isValid) {\r\n          return Interval.after(start, dur);\r\n        }\r\n      } else if (end.isValid) {\r\n        const dur = Duration.fromISO(s, opts);\r\n\r\n        if (dur.isValid) {\r\n          return Interval.before(end, dur);\r\n        }\r\n      }\r\n    }\r\n\r\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\r\n  }\r\n  /**\r\n   * Check if an object is an Interval. Works across context boundaries\r\n   * @param {object} o\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  static isInterval(o) {\r\n    return o && o.isLuxonInterval || false;\r\n  }\r\n  /**\r\n   * Returns the start of the Interval\r\n   * @type {DateTime}\r\n   */\r\n\r\n\r\n  get start() {\r\n    return this.isValid ? this.s : null;\r\n  }\r\n  /**\r\n   * Returns the end of the Interval\r\n   * @type {DateTime}\r\n   */\r\n\r\n\r\n  get end() {\r\n    return this.isValid ? this.e : null;\r\n  }\r\n  /**\r\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get isValid() {\r\n    return this.invalidReason === null;\r\n  }\r\n  /**\r\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get invalidReason() {\r\n    return this.invalid ? this.invalid.reason : null;\r\n  }\r\n  /**\r\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get invalidExplanation() {\r\n    return this.invalid ? this.invalid.explanation : null;\r\n  }\r\n  /**\r\n   * Returns the length of the Interval in the specified unit.\r\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  length(unit = \"milliseconds\") {\r\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\r\n  }\r\n  /**\r\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\r\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\r\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\r\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  count(unit = \"milliseconds\") {\r\n    if (!this.isValid) return NaN;\r\n    const start = this.start.startOf(unit),\r\n          end = this.end.startOf(unit);\r\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\r\n  }\r\n  /**\r\n   * Returns whether this Interval's start and end are both in the same unit of time\r\n   * @param {string} unit - the unit of time to check sameness on\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  hasSame(unit) {\r\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\r\n  }\r\n  /**\r\n   * Return whether this Interval has the same start and end DateTimes.\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  isEmpty() {\r\n    return this.s.valueOf() === this.e.valueOf();\r\n  }\r\n  /**\r\n   * Return whether this Interval's start is after the specified DateTime.\r\n   * @param {DateTime} dateTime\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  isAfter(dateTime) {\r\n    if (!this.isValid) return false;\r\n    return this.s > dateTime;\r\n  }\r\n  /**\r\n   * Return whether this Interval's end is before the specified DateTime.\r\n   * @param {DateTime} dateTime\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  isBefore(dateTime) {\r\n    if (!this.isValid) return false;\r\n    return this.e <= dateTime;\r\n  }\r\n  /**\r\n   * Return whether this Interval contains the specified DateTime.\r\n   * @param {DateTime} dateTime\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  contains(dateTime) {\r\n    if (!this.isValid) return false;\r\n    return this.s <= dateTime && this.e > dateTime;\r\n  }\r\n  /**\r\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\r\n   * @param {Object} values - the values to set\r\n   * @param {DateTime} values.start - the starting DateTime\r\n   * @param {DateTime} values.end - the ending DateTime\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  set({\r\n    start,\r\n    end\r\n  } = {}) {\r\n    if (!this.isValid) return this;\r\n    return Interval.fromDateTimes(start || this.s, end || this.e);\r\n  }\r\n  /**\r\n   * Split this Interval at each of the specified DateTimes\r\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\r\n   * @return {[Interval]}\r\n   */\r\n\r\n\r\n  splitAt(...dateTimes) {\r\n    if (!this.isValid) return [];\r\n    const sorted = dateTimes.map(friendlyDateTime).filter(d => this.contains(d)).sort(),\r\n          results = [];\r\n    let {\r\n      s\r\n    } = this,\r\n        i = 0;\r\n\r\n    while (s < this.e) {\r\n      const added = sorted[i] || this.e,\r\n            next = +added > +this.e ? this.e : added;\r\n      results.push(Interval.fromDateTimes(s, next));\r\n      s = next;\r\n      i += 1;\r\n    }\r\n\r\n    return results;\r\n  }\r\n  /**\r\n   * Split this Interval into smaller Intervals, each of the specified length.\r\n   * Left over time is grouped into a smaller interval\r\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\r\n   * @return {[Interval]}\r\n   */\r\n\r\n\r\n  splitBy(duration) {\r\n    const dur = friendlyDuration(duration);\r\n\r\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\r\n      return [];\r\n    }\r\n\r\n    let {\r\n      s\r\n    } = this,\r\n        added,\r\n        next;\r\n    const results = [];\r\n\r\n    while (s < this.e) {\r\n      added = s.plus(dur);\r\n      next = +added > +this.e ? this.e : added;\r\n      results.push(Interval.fromDateTimes(s, next));\r\n      s = next;\r\n    }\r\n\r\n    return results;\r\n  }\r\n  /**\r\n   * Split this Interval into the specified number of smaller intervals.\r\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\r\n   * @return {[Interval]}\r\n   */\r\n\r\n\r\n  divideEqually(numberOfParts) {\r\n    if (!this.isValid) return [];\r\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\r\n  }\r\n  /**\r\n   * Return whether this Interval overlaps with the specified Interval\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  overlaps(other) {\r\n    return this.e > other.s && this.s < other.e;\r\n  }\r\n  /**\r\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  abutsStart(other) {\r\n    if (!this.isValid) return false;\r\n    return +this.e === +other.s;\r\n  }\r\n  /**\r\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  abutsEnd(other) {\r\n    if (!this.isValid) return false;\r\n    return +other.e === +this.s;\r\n  }\r\n  /**\r\n   * Return whether this Interval engulfs the start and end of the specified Interval.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  engulfs(other) {\r\n    if (!this.isValid) return false;\r\n    return this.s <= other.s && this.e >= other.e;\r\n  }\r\n  /**\r\n   * Return whether this Interval has the same start and end as the specified Interval.\r\n   * @param {Interval} other\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  equals(other) {\r\n    if (!this.isValid || !other.isValid) {\r\n      return false;\r\n    }\r\n\r\n    return this.s.equals(other.s) && this.e.equals(other.e);\r\n  }\r\n  /**\r\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\r\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\r\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\r\n   * @param {Interval} other\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  intersection(other) {\r\n    if (!this.isValid) return this;\r\n    const s = this.s > other.s ? this.s : other.s,\r\n          e = this.e < other.e ? this.e : other.e;\r\n\r\n    if (s > e) {\r\n      return null;\r\n    } else {\r\n      return Interval.fromDateTimes(s, e);\r\n    }\r\n  }\r\n  /**\r\n   * Return an Interval representing the union of this Interval and the specified Interval.\r\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\r\n   * @param {Interval} other\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  union(other) {\r\n    if (!this.isValid) return this;\r\n    const s = this.s < other.s ? this.s : other.s,\r\n          e = this.e > other.e ? this.e : other.e;\r\n    return Interval.fromDateTimes(s, e);\r\n  }\r\n  /**\r\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\r\n   * Combines overlapping and adjacent Intervals.\r\n   * @param {[Interval]} intervals\r\n   * @return {[Interval]}\r\n   */\r\n\r\n\r\n  static merge(intervals) {\r\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\r\n      if (!current) {\r\n        return [sofar, item];\r\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\r\n        return [sofar, current.union(item)];\r\n      } else {\r\n        return [sofar.concat([current]), item];\r\n      }\r\n    }, [[], null]);\r\n\r\n    if (final) {\r\n      found.push(final);\r\n    }\r\n\r\n    return found;\r\n  }\r\n  /**\r\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\r\n   * @param {[Interval]} intervals\r\n   * @return {[Interval]}\r\n   */\r\n\r\n\r\n  static xor(intervals) {\r\n    let start = null,\r\n        currentCount = 0;\r\n    const results = [],\r\n          ends = intervals.map(i => [{\r\n      time: i.s,\r\n      type: \"s\"\r\n    }, {\r\n      time: i.e,\r\n      type: \"e\"\r\n    }]),\r\n          flattened = Array.prototype.concat(...ends),\r\n          arr = flattened.sort((a, b) => a.time - b.time);\r\n\r\n    for (const i of arr) {\r\n      currentCount += i.type === \"s\" ? 1 : -1;\r\n\r\n      if (currentCount === 1) {\r\n        start = i.time;\r\n      } else {\r\n        if (start && +start !== +i.time) {\r\n          results.push(Interval.fromDateTimes(start, i.time));\r\n        }\r\n\r\n        start = null;\r\n      }\r\n    }\r\n\r\n    return Interval.merge(results);\r\n  }\r\n  /**\r\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\r\n   * @param {...Interval} intervals\r\n   * @return {[Interval]}\r\n   */\r\n\r\n\r\n  difference(...intervals) {\r\n    return Interval.xor([this].concat(intervals)).map(i => this.intersection(i)).filter(i => i && !i.isEmpty());\r\n  }\r\n  /**\r\n   * Returns a string representation of this Interval appropriate for debugging.\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toString() {\r\n    if (!this.isValid) return INVALID$1;\r\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this Interval.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISO(opts) {\r\n    if (!this.isValid) return INVALID$1;\r\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\r\n   * The time components are ignored.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISODate() {\r\n    if (!this.isValid) return INVALID$1;\r\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\r\n   * The date components are ignored.\r\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\r\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISOTime(opts) {\r\n    if (!this.isValid) return INVALID$1;\r\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\r\n  }\r\n  /**\r\n   * Returns a string representation of this Interval formatted according to the specified format string.\r\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toFormat(dateFormat, {\r\n    separator = \" – \"\r\n  } = {}) {\r\n    if (!this.isValid) return INVALID$1;\r\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\r\n  }\r\n  /**\r\n   * Return a Duration representing the time spanned by this interval.\r\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\r\n   * @param {Object} opts - options that affect the creation of the Duration\r\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\r\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  toDuration(unit, opts) {\r\n    if (!this.isValid) {\r\n      return Duration.invalid(this.invalidReason);\r\n    }\r\n\r\n    return this.e.diff(this.s, unit, opts);\r\n  }\r\n  /**\r\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\r\n   * @param {function} mapFn\r\n   * @return {Interval}\r\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\r\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\r\n   */\r\n\r\n\r\n  mapEndpoints(mapFn) {\r\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\r\n  }\r\n\r\n}\r\n/**\r\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\r\n */\r\n\r\n\r\nclass Info {\r\n  /**\r\n   * Return whether the specified zone contains a DST.\r\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\r\n   * @return {boolean}\r\n   */\r\n  static hasDST(zone = Settings.defaultZone) {\r\n    const proto = DateTime.local().setZone(zone).set({\r\n      month: 12\r\n    });\r\n    return !zone.universal && proto.offset !== proto.set({\r\n      month: 6\r\n    }).offset;\r\n  }\r\n  /**\r\n   * Return whether the specified zone is a valid IANA specifier.\r\n   * @param {string} zone - Zone to check\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  static isValidIANAZone(zone) {\r\n    return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);\r\n  }\r\n  /**\r\n   * Converts the input into a {@link Zone} instance.\r\n   *\r\n   * * If `input` is already a Zone instance, it is returned unchanged.\r\n   * * If `input` is a string containing a valid time zone name, a Zone instance\r\n   *   with that name is returned.\r\n   * * If `input` is a string that doesn't refer to a known time zone, a Zone\r\n   *   instance with {@link Zone.isValid} == false is returned.\r\n   * * If `input is a number, a Zone instance with the specified fixed offset\r\n   *   in minutes is returned.\r\n   * * If `input` is `null` or `undefined`, the default zone is returned.\r\n   * @param {string|Zone|number} [input] - the value to be converted\r\n   * @return {Zone}\r\n   */\r\n\r\n\r\n  static normalizeZone(input) {\r\n    return normalizeZone(input, Settings.defaultZone);\r\n  }\r\n  /**\r\n   * Return an array of standalone month names.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.locale] - the locale code\r\n   * @param {string} [opts.numberingSystem=null] - the numbering system\r\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\r\n   * @example Info.months()[0] //=> 'January'\r\n   * @example Info.months('short')[0] //=> 'Jan'\r\n   * @example Info.months('numeric')[0] //=> '1'\r\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\r\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\r\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\r\n   * @return {[string]}\r\n   */\r\n\r\n\r\n  static months(length = \"long\", {\r\n    locale = null,\r\n    numberingSystem = null,\r\n    outputCalendar = \"gregory\"\r\n  } = {}) {\r\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\r\n  }\r\n  /**\r\n   * Return an array of format month names.\r\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\r\n   * changes the string.\r\n   * See {@link months}\r\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.locale] - the locale code\r\n   * @param {string} [opts.numberingSystem=null] - the numbering system\r\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\r\n   * @return {[string]}\r\n   */\r\n\r\n\r\n  static monthsFormat(length = \"long\", {\r\n    locale = null,\r\n    numberingSystem = null,\r\n    outputCalendar = \"gregory\"\r\n  } = {}) {\r\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\r\n  }\r\n  /**\r\n   * Return an array of standalone week names.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.locale] - the locale code\r\n   * @param {string} [opts.numberingSystem=null] - the numbering system\r\n   * @example Info.weekdays()[0] //=> 'Monday'\r\n   * @example Info.weekdays('short')[0] //=> 'Mon'\r\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\r\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\r\n   * @return {[string]}\r\n   */\r\n\r\n\r\n  static weekdays(length = \"long\", {\r\n    locale = null,\r\n    numberingSystem = null\r\n  } = {}) {\r\n    return Locale.create(locale, numberingSystem, null).weekdays(length);\r\n  }\r\n  /**\r\n   * Return an array of format week names.\r\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\r\n   * changes the string.\r\n   * See {@link weekdays}\r\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.locale=null] - the locale code\r\n   * @param {string} [opts.numberingSystem=null] - the numbering system\r\n   * @return {[string]}\r\n   */\r\n\r\n\r\n  static weekdaysFormat(length = \"long\", {\r\n    locale = null,\r\n    numberingSystem = null\r\n  } = {}) {\r\n    return Locale.create(locale, numberingSystem, null).weekdays(length, true);\r\n  }\r\n  /**\r\n   * Return an array of meridiems.\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.locale] - the locale code\r\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\r\n   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]\r\n   * @return {[string]}\r\n   */\r\n\r\n\r\n  static meridiems({\r\n    locale = null\r\n  } = {}) {\r\n    return Locale.create(locale).meridiems();\r\n  }\r\n  /**\r\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\r\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.locale] - the locale code\r\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\r\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\r\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\r\n   * @return {[string]}\r\n   */\r\n\r\n\r\n  static eras(length = \"short\", {\r\n    locale = null\r\n  } = {}) {\r\n    return Locale.create(locale, null, \"gregory\").eras(length);\r\n  }\r\n  /**\r\n   * Return the set of available features in this environment.\r\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\r\n   * Keys:\r\n   * * `zones`: whether this environment supports IANA timezones\r\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\r\n   * * `intl`: whether this environment supports general internationalization\r\n   * * `relative`: whether this environment supports relative time formatting\r\n   * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }\r\n   * @return {Object}\r\n   */\r\n\r\n\r\n  static features() {\r\n    let intl = false,\r\n        intlTokens = false,\r\n        zones = false,\r\n        relative = false;\r\n\r\n    if (hasIntl()) {\r\n      intl = true;\r\n      intlTokens = hasFormatToParts();\r\n      relative = hasRelative();\r\n\r\n      try {\r\n        zones = new Intl.DateTimeFormat(\"en\", {\r\n          timeZone: \"America/New_York\"\r\n        }).resolvedOptions().timeZone === \"America/New_York\";\r\n      } catch (e) {\r\n        zones = false;\r\n      }\r\n    }\r\n\r\n    return {\r\n      intl,\r\n      intlTokens,\r\n      zones,\r\n      relative\r\n    };\r\n  }\r\n\r\n}\r\n\r\nfunction dayDiff(earlier, later) {\r\n  const utcDayStart = dt => dt.toUTC(0, {\r\n    keepLocalTime: true\r\n  }).startOf(\"day\").valueOf(),\r\n        ms = utcDayStart(later) - utcDayStart(earlier);\r\n\r\n  return Math.floor(Duration.fromMillis(ms).as(\"days\"));\r\n}\r\n\r\nfunction highOrderDiffs(cursor, later, units) {\r\n  const differs = [[\"years\", (a, b) => b.year - a.year], [\"months\", (a, b) => b.month - a.month + (b.year - a.year) * 12], [\"weeks\", (a, b) => {\r\n    const days = dayDiff(a, b);\r\n    return (days - days % 7) / 7;\r\n  }], [\"days\", dayDiff]];\r\n  const results = {};\r\n  let lowestOrder, highWater;\r\n\r\n  for (const [unit, differ] of differs) {\r\n    if (units.indexOf(unit) >= 0) {\r\n      lowestOrder = unit;\r\n      let delta = differ(cursor, later);\r\n      highWater = cursor.plus({\r\n        [unit]: delta\r\n      });\r\n\r\n      if (highWater > later) {\r\n        cursor = cursor.plus({\r\n          [unit]: delta - 1\r\n        });\r\n        delta -= 1;\r\n      } else {\r\n        cursor = highWater;\r\n      }\r\n\r\n      results[unit] = delta;\r\n    }\r\n  }\r\n\r\n  return [cursor, results, highWater, lowestOrder];\r\n}\r\n\r\nfunction diff(earlier, later, units, opts) {\r\n  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);\r\n  const remainingMillis = later - cursor;\r\n  const lowerOrderUnits = units.filter(u => [\"hours\", \"minutes\", \"seconds\", \"milliseconds\"].indexOf(u) >= 0);\r\n\r\n  if (lowerOrderUnits.length === 0) {\r\n    if (highWater < later) {\r\n      highWater = cursor.plus({\r\n        [lowestOrder]: 1\r\n      });\r\n    }\r\n\r\n    if (highWater !== cursor) {\r\n      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);\r\n    }\r\n  }\r\n\r\n  const duration = Duration.fromObject(Object.assign(results, opts));\r\n\r\n  if (lowerOrderUnits.length > 0) {\r\n    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);\r\n  } else {\r\n    return duration;\r\n  }\r\n}\r\n\r\nconst numberingSystems = {\r\n  arab: \"[\\u0660-\\u0669]\",\r\n  arabext: \"[\\u06F0-\\u06F9]\",\r\n  bali: \"[\\u1B50-\\u1B59]\",\r\n  beng: \"[\\u09E6-\\u09EF]\",\r\n  deva: \"[\\u0966-\\u096F]\",\r\n  fullwide: \"[\\uFF10-\\uFF19]\",\r\n  gujr: \"[\\u0AE6-\\u0AEF]\",\r\n  hanidec: \"[〇|一|二|三|四|五|六|七|八|九]\",\r\n  khmr: \"[\\u17E0-\\u17E9]\",\r\n  knda: \"[\\u0CE6-\\u0CEF]\",\r\n  laoo: \"[\\u0ED0-\\u0ED9]\",\r\n  limb: \"[\\u1946-\\u194F]\",\r\n  mlym: \"[\\u0D66-\\u0D6F]\",\r\n  mong: \"[\\u1810-\\u1819]\",\r\n  mymr: \"[\\u1040-\\u1049]\",\r\n  orya: \"[\\u0B66-\\u0B6F]\",\r\n  tamldec: \"[\\u0BE6-\\u0BEF]\",\r\n  telu: \"[\\u0C66-\\u0C6F]\",\r\n  thai: \"[\\u0E50-\\u0E59]\",\r\n  tibt: \"[\\u0F20-\\u0F29]\",\r\n  latn: \"\\\\d\"\r\n};\r\nconst numberingSystemsUTF16 = {\r\n  arab: [1632, 1641],\r\n  arabext: [1776, 1785],\r\n  bali: [6992, 7001],\r\n  beng: [2534, 2543],\r\n  deva: [2406, 2415],\r\n  fullwide: [65296, 65303],\r\n  gujr: [2790, 2799],\r\n  khmr: [6112, 6121],\r\n  knda: [3302, 3311],\r\n  laoo: [3792, 3801],\r\n  limb: [6470, 6479],\r\n  mlym: [3430, 3439],\r\n  mong: [6160, 6169],\r\n  mymr: [4160, 4169],\r\n  orya: [2918, 2927],\r\n  tamldec: [3046, 3055],\r\n  telu: [3174, 3183],\r\n  thai: [3664, 3673],\r\n  tibt: [3872, 3881]\r\n}; // eslint-disable-next-line\r\n\r\nconst hanidecChars = numberingSystems.hanidec.replace(/[\\[|\\]]/g, \"\").split(\"\");\r\n\r\nfunction parseDigits(str) {\r\n  let value = parseInt(str, 10);\r\n\r\n  if (isNaN(value)) {\r\n    value = \"\";\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n      const code = str.charCodeAt(i);\r\n\r\n      if (str[i].search(numberingSystems.hanidec) !== -1) {\r\n        value += hanidecChars.indexOf(str[i]);\r\n      } else {\r\n        for (const key in numberingSystemsUTF16) {\r\n          const [min, max] = numberingSystemsUTF16[key];\r\n\r\n          if (code >= min && code <= max) {\r\n            value += code - min;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return parseInt(value, 10);\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction digitRegex({\r\n  numberingSystem\r\n}, append = \"\") {\r\n  return new RegExp(`${numberingSystems[numberingSystem || \"latn\"]}${append}`);\r\n}\r\n\r\nconst MISSING_FTP = \"missing Intl.DateTimeFormat.formatToParts support\";\r\n\r\nfunction intUnit(regex, post = i => i) {\r\n  return {\r\n    regex,\r\n    deser: ([s]) => post(parseDigits(s))\r\n  };\r\n}\r\n\r\nfunction fixListRegex(s) {\r\n  // make dots optional and also make them literal\r\n  return s.replace(/\\./, \"\\\\.?\");\r\n}\r\n\r\nfunction stripInsensitivities(s) {\r\n  return s.replace(/\\./, \"\").toLowerCase();\r\n}\r\n\r\nfunction oneOf(strings, startIndex) {\r\n  if (strings === null) {\r\n    return null;\r\n  } else {\r\n    return {\r\n      regex: RegExp(strings.map(fixListRegex).join(\"|\")),\r\n      deser: ([s]) => strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\r\n    };\r\n  }\r\n}\r\n\r\nfunction offset(regex, groups) {\r\n  return {\r\n    regex,\r\n    deser: ([, h, m]) => signedOffset(h, m),\r\n    groups\r\n  };\r\n}\r\n\r\nfunction simple(regex) {\r\n  return {\r\n    regex,\r\n    deser: ([s]) => s\r\n  };\r\n}\r\n\r\nfunction escapeToken(value) {\r\n  // eslint-disable-next-line no-useless-escape\r\n  return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\r\n}\r\n\r\nfunction unitForToken(token, loc) {\r\n  const one = digitRegex(loc),\r\n        two = digitRegex(loc, \"{2}\"),\r\n        three = digitRegex(loc, \"{3}\"),\r\n        four = digitRegex(loc, \"{4}\"),\r\n        six = digitRegex(loc, \"{6}\"),\r\n        oneOrTwo = digitRegex(loc, \"{1,2}\"),\r\n        oneToThree = digitRegex(loc, \"{1,3}\"),\r\n        oneToSix = digitRegex(loc, \"{1,6}\"),\r\n        oneToNine = digitRegex(loc, \"{1,9}\"),\r\n        twoToFour = digitRegex(loc, \"{2,4}\"),\r\n        fourToSix = digitRegex(loc, \"{4,6}\"),\r\n        literal = t => ({\r\n    regex: RegExp(escapeToken(t.val)),\r\n    deser: ([s]) => s,\r\n    literal: true\r\n  }),\r\n        unitate = t => {\r\n    if (token.literal) {\r\n      return literal(t);\r\n    }\r\n\r\n    switch (t.val) {\r\n      // era\r\n      case \"G\":\r\n        return oneOf(loc.eras(\"short\", false), 0);\r\n\r\n      case \"GG\":\r\n        return oneOf(loc.eras(\"long\", false), 0);\r\n      // years\r\n\r\n      case \"y\":\r\n        return intUnit(oneToSix);\r\n\r\n      case \"yy\":\r\n        return intUnit(twoToFour, untruncateYear);\r\n\r\n      case \"yyyy\":\r\n        return intUnit(four);\r\n\r\n      case \"yyyyy\":\r\n        return intUnit(fourToSix);\r\n\r\n      case \"yyyyyy\":\r\n        return intUnit(six);\r\n      // months\r\n\r\n      case \"M\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"MM\":\r\n        return intUnit(two);\r\n\r\n      case \"MMM\":\r\n        return oneOf(loc.months(\"short\", true, false), 1);\r\n\r\n      case \"MMMM\":\r\n        return oneOf(loc.months(\"long\", true, false), 1);\r\n\r\n      case \"L\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"LL\":\r\n        return intUnit(two);\r\n\r\n      case \"LLL\":\r\n        return oneOf(loc.months(\"short\", false, false), 1);\r\n\r\n      case \"LLLL\":\r\n        return oneOf(loc.months(\"long\", false, false), 1);\r\n      // dates\r\n\r\n      case \"d\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"dd\":\r\n        return intUnit(two);\r\n      // ordinals\r\n\r\n      case \"o\":\r\n        return intUnit(oneToThree);\r\n\r\n      case \"ooo\":\r\n        return intUnit(three);\r\n      // time\r\n\r\n      case \"HH\":\r\n        return intUnit(two);\r\n\r\n      case \"H\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"hh\":\r\n        return intUnit(two);\r\n\r\n      case \"h\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"mm\":\r\n        return intUnit(two);\r\n\r\n      case \"m\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"q\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"qq\":\r\n        return intUnit(two);\r\n\r\n      case \"s\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"ss\":\r\n        return intUnit(two);\r\n\r\n      case \"S\":\r\n        return intUnit(oneToThree);\r\n\r\n      case \"SSS\":\r\n        return intUnit(three);\r\n\r\n      case \"u\":\r\n        return simple(oneToNine);\r\n      // meridiem\r\n\r\n      case \"a\":\r\n        return oneOf(loc.meridiems(), 0);\r\n      // weekYear (k)\r\n\r\n      case \"kkkk\":\r\n        return intUnit(four);\r\n\r\n      case \"kk\":\r\n        return intUnit(twoToFour, untruncateYear);\r\n      // weekNumber (W)\r\n\r\n      case \"W\":\r\n        return intUnit(oneOrTwo);\r\n\r\n      case \"WW\":\r\n        return intUnit(two);\r\n      // weekdays\r\n\r\n      case \"E\":\r\n      case \"c\":\r\n        return intUnit(one);\r\n\r\n      case \"EEE\":\r\n        return oneOf(loc.weekdays(\"short\", false, false), 1);\r\n\r\n      case \"EEEE\":\r\n        return oneOf(loc.weekdays(\"long\", false, false), 1);\r\n\r\n      case \"ccc\":\r\n        return oneOf(loc.weekdays(\"short\", true, false), 1);\r\n\r\n      case \"cccc\":\r\n        return oneOf(loc.weekdays(\"long\", true, false), 1);\r\n      // offset/zone\r\n\r\n      case \"Z\":\r\n      case \"ZZ\":\r\n        return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);\r\n\r\n      case \"ZZZ\":\r\n        return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);\r\n      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\r\n      // because we don't have any way to figure out what they are\r\n\r\n      case \"z\":\r\n        return simple(/[a-z_+-/]{1,256}?/i);\r\n\r\n      default:\r\n        return literal(t);\r\n    }\r\n  };\r\n\r\n  const unit = unitate(token) || {\r\n    invalidReason: MISSING_FTP\r\n  };\r\n  unit.token = token;\r\n  return unit;\r\n}\r\n\r\nconst partTypeStyleToTokenVal = {\r\n  year: {\r\n    \"2-digit\": \"yy\",\r\n    numeric: \"yyyyy\"\r\n  },\r\n  month: {\r\n    numeric: \"M\",\r\n    \"2-digit\": \"MM\",\r\n    short: \"MMM\",\r\n    long: \"MMMM\"\r\n  },\r\n  day: {\r\n    numeric: \"d\",\r\n    \"2-digit\": \"dd\"\r\n  },\r\n  weekday: {\r\n    short: \"EEE\",\r\n    long: \"EEEE\"\r\n  },\r\n  dayperiod: \"a\",\r\n  dayPeriod: \"a\",\r\n  hour: {\r\n    numeric: \"h\",\r\n    \"2-digit\": \"hh\"\r\n  },\r\n  minute: {\r\n    numeric: \"m\",\r\n    \"2-digit\": \"mm\"\r\n  },\r\n  second: {\r\n    numeric: \"s\",\r\n    \"2-digit\": \"ss\"\r\n  }\r\n};\r\n\r\nfunction tokenForPart(part, locale, formatOpts) {\r\n  const {\r\n    type,\r\n    value\r\n  } = part;\r\n\r\n  if (type === \"literal\") {\r\n    return {\r\n      literal: true,\r\n      val: value\r\n    };\r\n  }\r\n\r\n  const style = formatOpts[type];\r\n  let val = partTypeStyleToTokenVal[type];\r\n\r\n  if (typeof val === \"object\") {\r\n    val = val[style];\r\n  }\r\n\r\n  if (val) {\r\n    return {\r\n      literal: false,\r\n      val\r\n    };\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction buildRegex(units) {\r\n  const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, \"\");\r\n  return [`^${re}$`, units];\r\n}\r\n\r\nfunction match(input, regex, handlers) {\r\n  const matches = input.match(regex);\r\n\r\n  if (matches) {\r\n    const all = {};\r\n    let matchIndex = 1;\r\n\r\n    for (const i in handlers) {\r\n      if (hasOwnProperty(handlers, i)) {\r\n        const h = handlers[i],\r\n              groups = h.groups ? h.groups + 1 : 1;\r\n\r\n        if (!h.literal && h.token) {\r\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\r\n        }\r\n\r\n        matchIndex += groups;\r\n      }\r\n    }\r\n\r\n    return [matches, all];\r\n  } else {\r\n    return [matches, {}];\r\n  }\r\n}\r\n\r\nfunction dateTimeFromMatches(matches) {\r\n  const toField = token => {\r\n    switch (token) {\r\n      case \"S\":\r\n        return \"millisecond\";\r\n\r\n      case \"s\":\r\n        return \"second\";\r\n\r\n      case \"m\":\r\n        return \"minute\";\r\n\r\n      case \"h\":\r\n      case \"H\":\r\n        return \"hour\";\r\n\r\n      case \"d\":\r\n        return \"day\";\r\n\r\n      case \"o\":\r\n        return \"ordinal\";\r\n\r\n      case \"L\":\r\n      case \"M\":\r\n        return \"month\";\r\n\r\n      case \"y\":\r\n        return \"year\";\r\n\r\n      case \"E\":\r\n      case \"c\":\r\n        return \"weekday\";\r\n\r\n      case \"W\":\r\n        return \"weekNumber\";\r\n\r\n      case \"k\":\r\n        return \"weekYear\";\r\n\r\n      case \"q\":\r\n        return \"quarter\";\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  let zone;\r\n\r\n  if (!isUndefined(matches.Z)) {\r\n    zone = new FixedOffsetZone(matches.Z);\r\n  } else if (!isUndefined(matches.z)) {\r\n    zone = IANAZone.create(matches.z);\r\n  } else {\r\n    zone = null;\r\n  }\r\n\r\n  if (!isUndefined(matches.q)) {\r\n    matches.M = (matches.q - 1) * 3 + 1;\r\n  }\r\n\r\n  if (!isUndefined(matches.h)) {\r\n    if (matches.h < 12 && matches.a === 1) {\r\n      matches.h += 12;\r\n    } else if (matches.h === 12 && matches.a === 0) {\r\n      matches.h = 0;\r\n    }\r\n  }\r\n\r\n  if (matches.G === 0 && matches.y) {\r\n    matches.y = -matches.y;\r\n  }\r\n\r\n  if (!isUndefined(matches.u)) {\r\n    matches.S = parseMillis(matches.u);\r\n  }\r\n\r\n  const vals = Object.keys(matches).reduce((r, k) => {\r\n    const f = toField(k);\r\n\r\n    if (f) {\r\n      r[f] = matches[k];\r\n    }\r\n\r\n    return r;\r\n  }, {});\r\n  return [vals, zone];\r\n}\r\n\r\nlet dummyDateTimeCache = null;\r\n\r\nfunction getDummyDateTime() {\r\n  if (!dummyDateTimeCache) {\r\n    dummyDateTimeCache = DateTime.fromMillis(1555555555555);\r\n  }\r\n\r\n  return dummyDateTimeCache;\r\n}\r\n\r\nfunction maybeExpandMacroToken(token, locale) {\r\n  if (token.literal) {\r\n    return token;\r\n  }\r\n\r\n  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);\r\n\r\n  if (!formatOpts) {\r\n    return token;\r\n  }\r\n\r\n  const formatter = Formatter.create(locale, formatOpts);\r\n  const parts = formatter.formatDateTimeParts(getDummyDateTime());\r\n  const tokens = parts.map(p => tokenForPart(p, locale, formatOpts));\r\n\r\n  if (tokens.includes(undefined)) {\r\n    return token;\r\n  }\r\n\r\n  return tokens;\r\n}\r\n\r\nfunction expandMacroTokens(tokens, locale) {\r\n  return Array.prototype.concat(...tokens.map(t => maybeExpandMacroToken(t, locale)));\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nfunction explainFromTokens(locale, input, format) {\r\n  const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),\r\n        units = tokens.map(t => unitForToken(t, locale)),\r\n        disqualifyingUnit = units.find(t => t.invalidReason);\r\n\r\n  if (disqualifyingUnit) {\r\n    return {\r\n      input,\r\n      tokens,\r\n      invalidReason: disqualifyingUnit.invalidReason\r\n    };\r\n  } else {\r\n    const [regexString, handlers] = buildRegex(units),\r\n          regex = RegExp(regexString, \"i\"),\r\n          [rawMatches, matches] = match(input, regex, handlers),\r\n          [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\r\n\r\n    if (hasOwnProperty(matches, \"a\") && hasOwnProperty(matches, \"H\")) {\r\n      throw new ConflictingSpecificationError(\"Can't include meridiem when specifying 24-hour format\");\r\n    }\r\n\r\n    return {\r\n      input,\r\n      tokens,\r\n      regex,\r\n      rawMatches,\r\n      matches,\r\n      result,\r\n      zone\r\n    };\r\n  }\r\n}\r\n\r\nfunction parseFromTokens(locale, input, format) {\r\n  const {\r\n    result,\r\n    zone,\r\n    invalidReason\r\n  } = explainFromTokens(locale, input, format);\r\n  return [result, zone, invalidReason];\r\n}\r\n\r\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\r\n      leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\r\n\r\nfunction unitOutOfRange(unit, value) {\r\n  return new Invalid(\"unit out of range\", `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);\r\n}\r\n\r\nfunction dayOfWeek(year, month, day) {\r\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\r\n  return js === 0 ? 7 : js;\r\n}\r\n\r\nfunction computeOrdinal(year, month, day) {\r\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\r\n}\r\n\r\nfunction uncomputeOrdinal(year, ordinal) {\r\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\r\n        month0 = table.findIndex(i => i < ordinal),\r\n        day = ordinal - table[month0];\r\n  return {\r\n    month: month0 + 1,\r\n    day\r\n  };\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nfunction gregorianToWeek(gregObj) {\r\n  const {\r\n    year,\r\n    month,\r\n    day\r\n  } = gregObj,\r\n        ordinal = computeOrdinal(year, month, day),\r\n        weekday = dayOfWeek(year, month, day);\r\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\r\n      weekYear;\r\n\r\n  if (weekNumber < 1) {\r\n    weekYear = year - 1;\r\n    weekNumber = weeksInWeekYear(weekYear);\r\n  } else if (weekNumber > weeksInWeekYear(year)) {\r\n    weekYear = year + 1;\r\n    weekNumber = 1;\r\n  } else {\r\n    weekYear = year;\r\n  }\r\n\r\n  return Object.assign({\r\n    weekYear,\r\n    weekNumber,\r\n    weekday\r\n  }, timeObject(gregObj));\r\n}\r\n\r\nfunction weekToGregorian(weekData) {\r\n  const {\r\n    weekYear,\r\n    weekNumber,\r\n    weekday\r\n  } = weekData,\r\n        weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\r\n        yearInDays = daysInYear(weekYear);\r\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\r\n      year;\r\n\r\n  if (ordinal < 1) {\r\n    year = weekYear - 1;\r\n    ordinal += daysInYear(year);\r\n  } else if (ordinal > yearInDays) {\r\n    year = weekYear + 1;\r\n    ordinal -= daysInYear(weekYear);\r\n  } else {\r\n    year = weekYear;\r\n  }\r\n\r\n  const {\r\n    month,\r\n    day\r\n  } = uncomputeOrdinal(year, ordinal);\r\n  return Object.assign({\r\n    year,\r\n    month,\r\n    day\r\n  }, timeObject(weekData));\r\n}\r\n\r\nfunction gregorianToOrdinal(gregData) {\r\n  const {\r\n    year,\r\n    month,\r\n    day\r\n  } = gregData,\r\n        ordinal = computeOrdinal(year, month, day);\r\n  return Object.assign({\r\n    year,\r\n    ordinal\r\n  }, timeObject(gregData));\r\n}\r\n\r\nfunction ordinalToGregorian(ordinalData) {\r\n  const {\r\n    year,\r\n    ordinal\r\n  } = ordinalData,\r\n        {\r\n    month,\r\n    day\r\n  } = uncomputeOrdinal(year, ordinal);\r\n  return Object.assign({\r\n    year,\r\n    month,\r\n    day\r\n  }, timeObject(ordinalData));\r\n}\r\n\r\nfunction hasInvalidWeekData(obj) {\r\n  const validYear = isInteger(obj.weekYear),\r\n        validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\r\n        validWeekday = integerBetween(obj.weekday, 1, 7);\r\n\r\n  if (!validYear) {\r\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\r\n  } else if (!validWeek) {\r\n    return unitOutOfRange(\"week\", obj.week);\r\n  } else if (!validWeekday) {\r\n    return unitOutOfRange(\"weekday\", obj.weekday);\r\n  } else return false;\r\n}\r\n\r\nfunction hasInvalidOrdinalData(obj) {\r\n  const validYear = isInteger(obj.year),\r\n        validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\r\n\r\n  if (!validYear) {\r\n    return unitOutOfRange(\"year\", obj.year);\r\n  } else if (!validOrdinal) {\r\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\r\n  } else return false;\r\n}\r\n\r\nfunction hasInvalidGregorianData(obj) {\r\n  const validYear = isInteger(obj.year),\r\n        validMonth = integerBetween(obj.month, 1, 12),\r\n        validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\r\n\r\n  if (!validYear) {\r\n    return unitOutOfRange(\"year\", obj.year);\r\n  } else if (!validMonth) {\r\n    return unitOutOfRange(\"month\", obj.month);\r\n  } else if (!validDay) {\r\n    return unitOutOfRange(\"day\", obj.day);\r\n  } else return false;\r\n}\r\n\r\nfunction hasInvalidTimeData(obj) {\r\n  const {\r\n    hour,\r\n    minute,\r\n    second,\r\n    millisecond\r\n  } = obj;\r\n  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,\r\n        validMinute = integerBetween(minute, 0, 59),\r\n        validSecond = integerBetween(second, 0, 59),\r\n        validMillisecond = integerBetween(millisecond, 0, 999);\r\n\r\n  if (!validHour) {\r\n    return unitOutOfRange(\"hour\", hour);\r\n  } else if (!validMinute) {\r\n    return unitOutOfRange(\"minute\", minute);\r\n  } else if (!validSecond) {\r\n    return unitOutOfRange(\"second\", second);\r\n  } else if (!validMillisecond) {\r\n    return unitOutOfRange(\"millisecond\", millisecond);\r\n  } else return false;\r\n}\r\n\r\nconst INVALID$2 = \"Invalid DateTime\";\r\nconst MAX_DATE = 8.64e15;\r\n\r\nfunction unsupportedZone(zone) {\r\n  return new Invalid(\"unsupported zone\", `the zone \"${zone.name}\" is not supported`);\r\n} // we cache week data on the DT object and this intermediates the cache\r\n\r\n\r\nfunction possiblyCachedWeekData(dt) {\r\n  if (dt.weekData === null) {\r\n    dt.weekData = gregorianToWeek(dt.c);\r\n  }\r\n\r\n  return dt.weekData;\r\n} // clone really means, \"make a new object with these modifications\". all \"setters\" really use this\r\n// to create a new object while only changing some of the properties\r\n\r\n\r\nfunction clone$1(inst, alts) {\r\n  const current = {\r\n    ts: inst.ts,\r\n    zone: inst.zone,\r\n    c: inst.c,\r\n    o: inst.o,\r\n    loc: inst.loc,\r\n    invalid: inst.invalid\r\n  };\r\n  return new DateTime(Object.assign({}, current, alts, {\r\n    old: current\r\n  }));\r\n} // find the right offset a given local time. The o input is our guess, which determines which\r\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\r\n\r\n\r\nfunction fixOffset(localTS, o, tz) {\r\n  // Our UTC time is just a guess because our offset is just a guess\r\n  let utcGuess = localTS - o * 60 * 1000; // Test whether the zone matches the offset for this ts\r\n\r\n  const o2 = tz.offset(utcGuess); // If so, offset didn't change and we're done\r\n\r\n  if (o === o2) {\r\n    return [utcGuess, o];\r\n  } // If not, change the ts by the difference in the offset\r\n\r\n\r\n  utcGuess -= (o2 - o) * 60 * 1000; // If that gives us the local time we want, we're done\r\n\r\n  const o3 = tz.offset(utcGuess);\r\n\r\n  if (o2 === o3) {\r\n    return [utcGuess, o2];\r\n  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\r\n\r\n\r\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\r\n} // convert an epoch timestamp into a calendar object with the given offset\r\n\r\n\r\nfunction tsToObj(ts, offset) {\r\n  ts += offset * 60 * 1000;\r\n  const d = new Date(ts);\r\n  return {\r\n    year: d.getUTCFullYear(),\r\n    month: d.getUTCMonth() + 1,\r\n    day: d.getUTCDate(),\r\n    hour: d.getUTCHours(),\r\n    minute: d.getUTCMinutes(),\r\n    second: d.getUTCSeconds(),\r\n    millisecond: d.getUTCMilliseconds()\r\n  };\r\n} // convert a calendar object to a epoch timestamp\r\n\r\n\r\nfunction objToTS(obj, offset, zone) {\r\n  return fixOffset(objToLocalTS(obj), offset, zone);\r\n} // create a new DT instance by adding a duration, adjusting for DSTs\r\n\r\n\r\nfunction adjustTime(inst, dur) {\r\n  const keys = Object.keys(dur.values);\r\n\r\n  if (keys.indexOf(\"milliseconds\") === -1) {\r\n    keys.push(\"milliseconds\");\r\n  }\r\n\r\n  dur = dur.shiftTo(...keys);\r\n  const oPre = inst.o,\r\n        year = inst.c.year + dur.years,\r\n        month = inst.c.month + dur.months + dur.quarters * 3,\r\n        c = Object.assign({}, inst.c, {\r\n    year,\r\n    month,\r\n    day: Math.min(inst.c.day, daysInMonth(year, month)) + dur.days + dur.weeks * 7\r\n  }),\r\n        millisToAdd = Duration.fromObject({\r\n    hours: dur.hours,\r\n    minutes: dur.minutes,\r\n    seconds: dur.seconds,\r\n    milliseconds: dur.milliseconds\r\n  }).as(\"milliseconds\"),\r\n        localTS = objToLocalTS(c);\r\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\r\n\r\n  if (millisToAdd !== 0) {\r\n    ts += millisToAdd; // that could have changed the offset by going over a DST, but we want to keep the ts the same\r\n\r\n    o = inst.zone.offset(ts);\r\n  }\r\n\r\n  return {\r\n    ts,\r\n    o\r\n  };\r\n} // helper useful in turning the results of parsing into real dates\r\n// by handling the zone options\r\n\r\n\r\nfunction parseDataToDateTime(parsed, parsedZone, opts, format, text) {\r\n  const {\r\n    setZone,\r\n    zone\r\n  } = opts;\r\n\r\n  if (parsed && Object.keys(parsed).length !== 0) {\r\n    const interpretationZone = parsedZone || zone,\r\n          inst = DateTime.fromObject(Object.assign(parsed, opts, {\r\n      zone: interpretationZone,\r\n      // setZone is a valid option in the calling methods, but not in fromObject\r\n      setZone: undefined\r\n    }));\r\n    return setZone ? inst : inst.setZone(zone);\r\n  } else {\r\n    return DateTime.invalid(new Invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ${format}`));\r\n  }\r\n} // if you want to output a technical format (e.g. RFC 2822), this helper\r\n// helps handle the details\r\n\r\n\r\nfunction toTechFormat(dt, format, allowZ = true) {\r\n  return dt.isValid ? Formatter.create(Locale.create(\"en-US\"), {\r\n    allowZ,\r\n    forceSimple: true\r\n  }).formatDateTimeFromString(dt, format) : null;\r\n} // technical time formats (e.g. the time part of ISO 8601), take some options\r\n// and this commonizes their handling\r\n\r\n\r\nfunction toTechTimeFormat(dt, {\r\n  suppressSeconds = false,\r\n  suppressMilliseconds = false,\r\n  includeOffset,\r\n  includeZone = false,\r\n  spaceZone = false,\r\n  format = \"extended\"\r\n}) {\r\n  let fmt = format === \"basic\" ? \"HHmm\" : \"HH:mm\";\r\n\r\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\r\n    fmt += format === \"basic\" ? \"ss\" : \":ss\";\r\n\r\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\r\n      fmt += \".SSS\";\r\n    }\r\n  }\r\n\r\n  if ((includeZone || includeOffset) && spaceZone) {\r\n    fmt += \" \";\r\n  }\r\n\r\n  if (includeZone) {\r\n    fmt += \"z\";\r\n  } else if (includeOffset) {\r\n    fmt += format === \"basic\" ? \"ZZZ\" : \"ZZ\";\r\n  }\r\n\r\n  return toTechFormat(dt, fmt);\r\n} // defaults for unspecified units in the supported calendars\r\n\r\n\r\nconst defaultUnitValues = {\r\n  month: 1,\r\n  day: 1,\r\n  hour: 0,\r\n  minute: 0,\r\n  second: 0,\r\n  millisecond: 0\r\n},\r\n      defaultWeekUnitValues = {\r\n  weekNumber: 1,\r\n  weekday: 1,\r\n  hour: 0,\r\n  minute: 0,\r\n  second: 0,\r\n  millisecond: 0\r\n},\r\n      defaultOrdinalUnitValues = {\r\n  ordinal: 1,\r\n  hour: 0,\r\n  minute: 0,\r\n  second: 0,\r\n  millisecond: 0\r\n}; // Units in the supported calendars, sorted by bigness\r\n\r\nconst orderedUnits$1 = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"],\r\n      orderedWeekUnits = [\"weekYear\", \"weekNumber\", \"weekday\", \"hour\", \"minute\", \"second\", \"millisecond\"],\r\n      orderedOrdinalUnits = [\"year\", \"ordinal\", \"hour\", \"minute\", \"second\", \"millisecond\"]; // standardize case and plurality in units\r\n\r\nfunction normalizeUnit(unit) {\r\n  const normalized = {\r\n    year: \"year\",\r\n    years: \"year\",\r\n    month: \"month\",\r\n    months: \"month\",\r\n    day: \"day\",\r\n    days: \"day\",\r\n    hour: \"hour\",\r\n    hours: \"hour\",\r\n    minute: \"minute\",\r\n    minutes: \"minute\",\r\n    quarter: \"quarter\",\r\n    quarters: \"quarter\",\r\n    second: \"second\",\r\n    seconds: \"second\",\r\n    millisecond: \"millisecond\",\r\n    milliseconds: \"millisecond\",\r\n    weekday: \"weekday\",\r\n    weekdays: \"weekday\",\r\n    weeknumber: \"weekNumber\",\r\n    weeksnumber: \"weekNumber\",\r\n    weeknumbers: \"weekNumber\",\r\n    weekyear: \"weekYear\",\r\n    weekyears: \"weekYear\",\r\n    ordinal: \"ordinal\"\r\n  }[unit.toLowerCase()];\r\n  if (!normalized) throw new InvalidUnitError(unit);\r\n  return normalized;\r\n} // this is a dumbed down version of fromObject() that runs about 60% faster\r\n// but doesn't do any validation, makes a bunch of assumptions about what units\r\n// are present, and so on.\r\n\r\n\r\nfunction quickDT(obj, zone) {\r\n  // assume we have the higher-order units\r\n  for (const u of orderedUnits$1) {\r\n    if (isUndefined(obj[u])) {\r\n      obj[u] = defaultUnitValues[u];\r\n    }\r\n  }\r\n\r\n  const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);\r\n\r\n  if (invalid) {\r\n    return DateTime.invalid(invalid);\r\n  }\r\n\r\n  const tsNow = Settings.now(),\r\n        offsetProvis = zone.offset(tsNow),\r\n        [ts, o] = objToTS(obj, offsetProvis, zone);\r\n  return new DateTime({\r\n    ts,\r\n    zone,\r\n    o\r\n  });\r\n}\r\n\r\nfunction diffRelative(start, end, opts) {\r\n  const round = isUndefined(opts.round) ? true : opts.round,\r\n        format = (c, unit) => {\r\n    c = roundTo(c, round || opts.calendary ? 0 : 2, true);\r\n    const formatter = end.loc.clone(opts).relFormatter(opts);\r\n    return formatter.format(c, unit);\r\n  },\r\n        differ = unit => {\r\n    if (opts.calendary) {\r\n      if (!end.hasSame(start, unit)) {\r\n        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);\r\n      } else return 0;\r\n    } else {\r\n      return end.diff(start, unit).get(unit);\r\n    }\r\n  };\r\n\r\n  if (opts.unit) {\r\n    return format(differ(opts.unit), opts.unit);\r\n  }\r\n\r\n  for (const unit of opts.units) {\r\n    const count = differ(unit);\r\n\r\n    if (Math.abs(count) >= 1) {\r\n      return format(count, unit);\r\n    }\r\n  }\r\n\r\n  return format(0, opts.units[opts.units.length - 1]);\r\n}\r\n/**\r\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\r\n *\r\n * A DateTime comprises of:\r\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\r\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\r\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\r\n *\r\n * Here is a brief overview of the most commonly used functionality it provides:\r\n *\r\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.\r\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\r\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\r\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\r\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\r\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\r\n * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.\r\n *\r\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\r\n */\r\n\r\n\r\nclass DateTime {\r\n  /**\r\n   * @access private\r\n   */\r\n  constructor(config) {\r\n    const zone = config.zone || Settings.defaultZone;\r\n    let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid(\"invalid input\") : null) || (!zone.isValid ? unsupportedZone(zone) : null);\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;\r\n    let c = null,\r\n        o = null;\r\n\r\n    if (!invalid) {\r\n      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);\r\n\r\n      if (unchanged) {\r\n        [c, o] = [config.old.c, config.old.o];\r\n      } else {\r\n        const ot = zone.offset(this.ts);\r\n        c = tsToObj(this.ts, ot);\r\n        invalid = Number.isNaN(c.year) ? new Invalid(\"invalid input\") : null;\r\n        c = invalid ? null : c;\r\n        o = invalid ? null : ot;\r\n      }\r\n    }\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n\r\n    this._zone = zone;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.loc = config.loc || Locale.create();\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.invalid = invalid;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.weekData = null;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.c = c;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.o = o;\r\n    /**\r\n     * @access private\r\n     */\r\n\r\n    this.isLuxonDateTime = true;\r\n  } // CONSTRUCT\r\n\r\n  /**\r\n   * Create a local DateTime\r\n   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\r\n   * @param {number} [month=1] - The month, 1-indexed\r\n   * @param {number} [day=1] - The day of the month\r\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\r\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\r\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\r\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\r\n   * @example DateTime.local()                            //~> now\r\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\r\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\r\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\r\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\r\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\r\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\r\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static local(year, month, day, hour, minute, second, millisecond) {\r\n    if (isUndefined(year)) {\r\n      return new DateTime({\r\n        ts: Settings.now()\r\n      });\r\n    } else {\r\n      return quickDT({\r\n        year,\r\n        month,\r\n        day,\r\n        hour,\r\n        minute,\r\n        second,\r\n        millisecond\r\n      }, Settings.defaultZone);\r\n    }\r\n  }\r\n  /**\r\n   * Create a DateTime in UTC\r\n   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\r\n   * @param {number} [month=1] - The month, 1-indexed\r\n   * @param {number} [day=1] - The day of the month\r\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\r\n   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59\r\n   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59\r\n   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999\r\n   * @example DateTime.utc()                            //~> now\r\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\r\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\r\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\r\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\r\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\r\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\r\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static utc(year, month, day, hour, minute, second, millisecond) {\r\n    if (isUndefined(year)) {\r\n      return new DateTime({\r\n        ts: Settings.now(),\r\n        zone: FixedOffsetZone.utcInstance\r\n      });\r\n    } else {\r\n      return quickDT({\r\n        year,\r\n        month,\r\n        day,\r\n        hour,\r\n        minute,\r\n        second,\r\n        millisecond\r\n      }, FixedOffsetZone.utcInstance);\r\n    }\r\n  }\r\n  /**\r\n   * Create a DateTime from a Javascript Date object. Uses the default zone.\r\n   * @param {Date} date - a Javascript Date object\r\n   * @param {Object} options - configuration options for the DateTime\r\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromJSDate(date, options = {}) {\r\n    const ts = isDate(date) ? date.valueOf() : NaN;\r\n\r\n    if (Number.isNaN(ts)) {\r\n      return DateTime.invalid(\"invalid input\");\r\n    }\r\n\r\n    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);\r\n\r\n    if (!zoneToUse.isValid) {\r\n      return DateTime.invalid(unsupportedZone(zoneToUse));\r\n    }\r\n\r\n    return new DateTime({\r\n      ts: ts,\r\n      zone: zoneToUse,\r\n      loc: Locale.fromObject(options)\r\n    });\r\n  }\r\n  /**\r\n   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\r\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\r\n   * @param {Object} options - configuration options for the DateTime\r\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\r\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromMillis(milliseconds, options = {}) {\r\n    if (!isNumber(milliseconds)) {\r\n      throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`);\r\n    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {\r\n      // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start\r\n      return DateTime.invalid(\"Timestamp out of range\");\r\n    } else {\r\n      return new DateTime({\r\n        ts: milliseconds,\r\n        zone: normalizeZone(options.zone, Settings.defaultZone),\r\n        loc: Locale.fromObject(options)\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.\r\n   * @param {number} seconds - a number of seconds since 1970 UTC\r\n   * @param {Object} options - configuration options for the DateTime\r\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\r\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\r\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromSeconds(seconds, options = {}) {\r\n    if (!isNumber(seconds)) {\r\n      throw new InvalidArgumentError(\"fromSeconds requires a numerical input\");\r\n    } else {\r\n      return new DateTime({\r\n        ts: seconds * 1000,\r\n        zone: normalizeZone(options.zone, Settings.defaultZone),\r\n        loc: Locale.fromObject(options)\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\r\n   * @param {Object} obj - the object to create the DateTime from\r\n   * @param {number} obj.year - a year, such as 1987\r\n   * @param {number} obj.month - a month, 1-12\r\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\r\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\r\n   * @param {number} obj.weekYear - an ISO week year\r\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\r\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\r\n   * @param {number} obj.hour - hour of the day, 0-23\r\n   * @param {number} obj.minute - minute of the hour, 0-59\r\n   * @param {number} obj.second - second of the minute, 0-59\r\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\r\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\r\n   * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\r\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\r\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'\r\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\r\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\r\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\r\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\r\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromObject(obj) {\r\n    const zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);\r\n\r\n    if (!zoneToUse.isValid) {\r\n      return DateTime.invalid(unsupportedZone(zoneToUse));\r\n    }\r\n\r\n    const tsNow = Settings.now(),\r\n          offsetProvis = zoneToUse.offset(tsNow),\r\n          normalized = normalizeObject(obj, normalizeUnit, [\"zone\", \"locale\", \"outputCalendar\", \"numberingSystem\"]),\r\n          containsOrdinal = !isUndefined(normalized.ordinal),\r\n          containsGregorYear = !isUndefined(normalized.year),\r\n          containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day),\r\n          containsGregor = containsGregorYear || containsGregorMD,\r\n          definiteWeekDef = normalized.weekYear || normalized.weekNumber,\r\n          loc = Locale.fromObject(obj); // cases:\r\n    // just a weekday -> this week's instance of that weekday, no worries\r\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\r\n    // (gregorian month or day) + ordinal -> error\r\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\r\n\r\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\r\n      throw new ConflictingSpecificationError(\"Can't mix weekYear/weekNumber units with year/month/day or ordinals\");\r\n    }\r\n\r\n    if (containsGregorMD && containsOrdinal) {\r\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\r\n    }\r\n\r\n    const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor; // configure ourselves to deal with gregorian dates or week stuff\r\n\r\n    let units,\r\n        defaultValues,\r\n        objNow = tsToObj(tsNow, offsetProvis);\r\n\r\n    if (useWeekData) {\r\n      units = orderedWeekUnits;\r\n      defaultValues = defaultWeekUnitValues;\r\n      objNow = gregorianToWeek(objNow);\r\n    } else if (containsOrdinal) {\r\n      units = orderedOrdinalUnits;\r\n      defaultValues = defaultOrdinalUnitValues;\r\n      objNow = gregorianToOrdinal(objNow);\r\n    } else {\r\n      units = orderedUnits$1;\r\n      defaultValues = defaultUnitValues;\r\n    } // set default values for missing stuff\r\n\r\n\r\n    let foundFirst = false;\r\n\r\n    for (const u of units) {\r\n      const v = normalized[u];\r\n\r\n      if (!isUndefined(v)) {\r\n        foundFirst = true;\r\n      } else if (foundFirst) {\r\n        normalized[u] = defaultValues[u];\r\n      } else {\r\n        normalized[u] = objNow[u];\r\n      }\r\n    } // make sure the values we have are in range\r\n\r\n\r\n    const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized),\r\n          invalid = higherOrderInvalid || hasInvalidTimeData(normalized);\r\n\r\n    if (invalid) {\r\n      return DateTime.invalid(invalid);\r\n    } // compute the actual time\r\n\r\n\r\n    const gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized,\r\n          [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\r\n          inst = new DateTime({\r\n      ts: tsFinal,\r\n      zone: zoneToUse,\r\n      o: offsetFinal,\r\n      loc\r\n    }); // gregorian data + weekday serves only to validate\r\n\r\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\r\n      return DateTime.invalid(\"mismatched weekday\", `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`);\r\n    }\r\n\r\n    return inst;\r\n  }\r\n  /**\r\n   * Create a DateTime from an ISO 8601 string\r\n   * @param {string} text - the ISO string\r\n   * @param {Object} opts - options to affect the creation\r\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\r\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\r\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\r\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\r\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\r\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\r\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})\r\n   * @example DateTime.fromISO('2016-W05-4')\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromISO(text, opts = {}) {\r\n    const [vals, parsedZone] = parseISODate(text);\r\n    return parseDataToDateTime(vals, parsedZone, opts, \"ISO 8601\", text);\r\n  }\r\n  /**\r\n   * Create a DateTime from an RFC 2822 string\r\n   * @param {string} text - the RFC 2822 string\r\n   * @param {Object} opts - options to affect the creation\r\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\r\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\r\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\r\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\r\n   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')\r\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromRFC2822(text, opts = {}) {\r\n    const [vals, parsedZone] = parseRFC2822Date(text);\r\n    return parseDataToDateTime(vals, parsedZone, opts, \"RFC 2822\", text);\r\n  }\r\n  /**\r\n   * Create a DateTime from an HTTP header date\r\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\r\n   * @param {string} text - the HTTP header date\r\n   * @param {Object} opts - options to affect the creation\r\n   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\r\n   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\r\n   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance\r\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\r\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\r\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\r\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromHTTP(text, opts = {}) {\r\n    const [vals, parsedZone] = parseHTTPDate(text);\r\n    return parseDataToDateTime(vals, parsedZone, opts, \"HTTP\", opts);\r\n  }\r\n  /**\r\n   * Create a DateTime from an input string and format string.\r\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\r\n   * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens\r\n   * @param {string} text - the string to parse\r\n   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)\r\n   * @param {Object} opts - options to affect the creation\r\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\r\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\r\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\r\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\r\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromFormat(text, fmt, opts = {}) {\r\n    if (isUndefined(text) || isUndefined(fmt)) {\r\n      throw new InvalidArgumentError(\"fromFormat requires an input string and a format\");\r\n    }\r\n\r\n    const {\r\n      locale = null,\r\n      numberingSystem = null\r\n    } = opts,\r\n          localeToUse = Locale.fromOpts({\r\n      locale,\r\n      numberingSystem,\r\n      defaultToEN: true\r\n    }),\r\n          [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, fmt);\r\n\r\n    if (invalid) {\r\n      return DateTime.invalid(invalid);\r\n    } else {\r\n      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text);\r\n    }\r\n  }\r\n  /**\r\n   * @deprecated use fromFormat instead\r\n   */\r\n\r\n\r\n  static fromString(text, fmt, opts = {}) {\r\n    return DateTime.fromFormat(text, fmt, opts);\r\n  }\r\n  /**\r\n   * Create a DateTime from a SQL date, time, or datetime\r\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\r\n   * @param {string} text - the string to parse\r\n   * @param {Object} opts - options to affect the creation\r\n   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\r\n   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\r\n   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\r\n   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\r\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\r\n   * @example DateTime.fromSQL('2017-05-15')\r\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\r\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\r\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\r\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\r\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\r\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\r\n   * @example DateTime.fromSQL('09:12:34.342')\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static fromSQL(text, opts = {}) {\r\n    const [vals, parsedZone] = parseSQL(text);\r\n    return parseDataToDateTime(vals, parsedZone, opts, \"SQL\", text);\r\n  }\r\n  /**\r\n   * Create an invalid DateTime.\r\n   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent\r\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  static invalid(reason, explanation = null) {\r\n    if (!reason) {\r\n      throw new InvalidArgumentError(\"need to specify a reason the DateTime is invalid\");\r\n    }\r\n\r\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\r\n\r\n    if (Settings.throwOnInvalid) {\r\n      throw new InvalidDateTimeError(invalid);\r\n    } else {\r\n      return new DateTime({\r\n        invalid\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Check if an object is a DateTime. Works across context boundaries\r\n   * @param {object} o\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  static isDateTime(o) {\r\n    return o && o.isLuxonDateTime || false;\r\n  } // INFO\r\n\r\n  /**\r\n   * Get the value of unit.\r\n   * @param {string} unit - a unit such as 'minute' or 'day'\r\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\r\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  get(unit) {\r\n    return this[unit];\r\n  }\r\n  /**\r\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\r\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\r\n   * * The DateTime was created by an operation on another invalid date\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get isValid() {\r\n    return this.invalid === null;\r\n  }\r\n  /**\r\n   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get invalidReason() {\r\n    return this.invalid ? this.invalid.reason : null;\r\n  }\r\n  /**\r\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get invalidExplanation() {\r\n    return this.invalid ? this.invalid.explanation : null;\r\n  }\r\n  /**\r\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\r\n   *\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get locale() {\r\n    return this.isValid ? this.loc.locale : null;\r\n  }\r\n  /**\r\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\r\n   *\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get numberingSystem() {\r\n    return this.isValid ? this.loc.numberingSystem : null;\r\n  }\r\n  /**\r\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\r\n   *\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get outputCalendar() {\r\n    return this.isValid ? this.loc.outputCalendar : null;\r\n  }\r\n  /**\r\n   * Get the time zone associated with this DateTime.\r\n   * @type {Zone}\r\n   */\r\n\r\n\r\n  get zone() {\r\n    return this._zone;\r\n  }\r\n  /**\r\n   * Get the name of the time zone.\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get zoneName() {\r\n    return this.isValid ? this.zone.name : null;\r\n  }\r\n  /**\r\n   * Get the year\r\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get year() {\r\n    return this.isValid ? this.c.year : NaN;\r\n  }\r\n  /**\r\n   * Get the quarter\r\n   * @example DateTime.local(2017, 5, 25).quarter //=> 2\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get quarter() {\r\n    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;\r\n  }\r\n  /**\r\n   * Get the month (1-12).\r\n   * @example DateTime.local(2017, 5, 25).month //=> 5\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get month() {\r\n    return this.isValid ? this.c.month : NaN;\r\n  }\r\n  /**\r\n   * Get the day of the month (1-30ish).\r\n   * @example DateTime.local(2017, 5, 25).day //=> 25\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get day() {\r\n    return this.isValid ? this.c.day : NaN;\r\n  }\r\n  /**\r\n   * Get the hour of the day (0-23).\r\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get hour() {\r\n    return this.isValid ? this.c.hour : NaN;\r\n  }\r\n  /**\r\n   * Get the minute of the hour (0-59).\r\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get minute() {\r\n    return this.isValid ? this.c.minute : NaN;\r\n  }\r\n  /**\r\n   * Get the second of the minute (0-59).\r\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get second() {\r\n    return this.isValid ? this.c.second : NaN;\r\n  }\r\n  /**\r\n   * Get the millisecond of the second (0-999).\r\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get millisecond() {\r\n    return this.isValid ? this.c.millisecond : NaN;\r\n  }\r\n  /**\r\n   * Get the week year\r\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get weekYear() {\r\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\r\n  }\r\n  /**\r\n   * Get the week number of the week year (1-52ish).\r\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get weekNumber() {\r\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\r\n  }\r\n  /**\r\n   * Get the day of the week.\r\n   * 1 is Monday and 7 is Sunday\r\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get weekday() {\r\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\r\n  }\r\n  /**\r\n   * Get the ordinal (meaning the day of the year)\r\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\r\n   * @type {number|DateTime}\r\n   */\r\n\r\n\r\n  get ordinal() {\r\n    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;\r\n  }\r\n  /**\r\n   * Get the human readable short month name, such as 'Oct'.\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get monthShort() {\r\n    return this.isValid ? Info.months(\"short\", {\r\n      locale: this.locale\r\n    })[this.month - 1] : null;\r\n  }\r\n  /**\r\n   * Get the human readable long month name, such as 'October'.\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get monthLong() {\r\n    return this.isValid ? Info.months(\"long\", {\r\n      locale: this.locale\r\n    })[this.month - 1] : null;\r\n  }\r\n  /**\r\n   * Get the human readable short weekday, such as 'Mon'.\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get weekdayShort() {\r\n    return this.isValid ? Info.weekdays(\"short\", {\r\n      locale: this.locale\r\n    })[this.weekday - 1] : null;\r\n  }\r\n  /**\r\n   * Get the human readable long weekday, such as 'Monday'.\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get weekdayLong() {\r\n    return this.isValid ? Info.weekdays(\"long\", {\r\n      locale: this.locale\r\n    })[this.weekday - 1] : null;\r\n  }\r\n  /**\r\n   * Get the UTC offset of this DateTime in minutes\r\n   * @example DateTime.local().offset //=> -240\r\n   * @example DateTime.utc().offset //=> 0\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get offset() {\r\n    return this.isValid ? +this.o : NaN;\r\n  }\r\n  /**\r\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get offsetNameShort() {\r\n    if (this.isValid) {\r\n      return this.zone.offsetName(this.ts, {\r\n        format: \"short\",\r\n        locale: this.locale\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @type {string}\r\n   */\r\n\r\n\r\n  get offsetNameLong() {\r\n    if (this.isValid) {\r\n      return this.zone.offsetName(this.ts, {\r\n        format: \"long\",\r\n        locale: this.locale\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * Get whether this zone's offset ever changes, as in a DST.\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get isOffsetFixed() {\r\n    return this.isValid ? this.zone.universal : null;\r\n  }\r\n  /**\r\n   * Get whether the DateTime is in a DST.\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get isInDST() {\r\n    if (this.isOffsetFixed) {\r\n      return false;\r\n    } else {\r\n      return this.offset > this.set({\r\n        month: 1\r\n      }).offset || this.offset > this.set({\r\n        month: 5\r\n      }).offset;\r\n    }\r\n  }\r\n  /**\r\n   * Returns true if this DateTime is in a leap year, false otherwise\r\n   * @example DateTime.local(2016).isInLeapYear //=> true\r\n   * @example DateTime.local(2013).isInLeapYear //=> false\r\n   * @type {boolean}\r\n   */\r\n\r\n\r\n  get isInLeapYear() {\r\n    return isLeapYear(this.year);\r\n  }\r\n  /**\r\n   * Returns the number of days in this DateTime's month\r\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\r\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get daysInMonth() {\r\n    return daysInMonth(this.year, this.month);\r\n  }\r\n  /**\r\n   * Returns the number of days in this DateTime's year\r\n   * @example DateTime.local(2016).daysInYear //=> 366\r\n   * @example DateTime.local(2013).daysInYear //=> 365\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get daysInYear() {\r\n    return this.isValid ? daysInYear(this.year) : NaN;\r\n  }\r\n  /**\r\n   * Returns the number of weeks in this DateTime's year\r\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\r\n   * @example DateTime.local(2004).weeksInWeekYear //=> 53\r\n   * @example DateTime.local(2013).weeksInWeekYear //=> 52\r\n   * @type {number}\r\n   */\r\n\r\n\r\n  get weeksInWeekYear() {\r\n    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;\r\n  }\r\n  /**\r\n   * Returns the resolved Intl options for this DateTime.\r\n   * This is useful in understanding the behavior of formatting methods\r\n   * @param {Object} opts - the same options as toLocaleString\r\n   * @return {Object}\r\n   */\r\n\r\n\r\n  resolvedLocaleOpts(opts = {}) {\r\n    const {\r\n      locale,\r\n      numberingSystem,\r\n      calendar\r\n    } = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this);\r\n    return {\r\n      locale,\r\n      numberingSystem,\r\n      outputCalendar: calendar\r\n    };\r\n  } // TRANSFORM\r\n\r\n  /**\r\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\r\n   *\r\n   * Equivalent to {@link setZone}('utc')\r\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\r\n   * @param {Object} [opts={}] - options to pass to `setZone()`\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  toUTC(offset = 0, opts = {}) {\r\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\r\n  }\r\n  /**\r\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\r\n   *\r\n   * Equivalent to `setZone('local')`\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  toLocal() {\r\n    return this.setZone(Settings.defaultZone);\r\n  }\r\n  /**\r\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\r\n   *\r\n   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\r\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\r\n   * @param {Object} opts - options\r\n   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  setZone(zone, {\r\n    keepLocalTime = false,\r\n    keepCalendarTime = false\r\n  } = {}) {\r\n    zone = normalizeZone(zone, Settings.defaultZone);\r\n\r\n    if (zone.equals(this.zone)) {\r\n      return this;\r\n    } else if (!zone.isValid) {\r\n      return DateTime.invalid(unsupportedZone(zone));\r\n    } else {\r\n      let newTS = this.ts;\r\n\r\n      if (keepLocalTime || keepCalendarTime) {\r\n        const offsetGuess = zone.offset(this.ts);\r\n        const asObj = this.toObject();\r\n        [newTS] = objToTS(asObj, offsetGuess, zone);\r\n      }\r\n\r\n      return clone$1(this, {\r\n        ts: newTS,\r\n        zone\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\r\n   * @param {Object} properties - the properties to set\r\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  reconfigure({\r\n    locale,\r\n    numberingSystem,\r\n    outputCalendar\r\n  } = {}) {\r\n    const loc = this.loc.clone({\r\n      locale,\r\n      numberingSystem,\r\n      outputCalendar\r\n    });\r\n    return clone$1(this, {\r\n      loc\r\n    });\r\n  }\r\n  /**\r\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\r\n   * Just a convenient alias for reconfigure({ locale })\r\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  setLocale(locale) {\r\n    return this.reconfigure({\r\n      locale\r\n    });\r\n  }\r\n  /**\r\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\r\n   * You can only set units with this method; for \"setting\" metadata, see {@link reconfigure} and {@link setZone}.\r\n   * @param {Object} values - a mapping of units to numbers\r\n   * @example dt.set({ year: 2017 })\r\n   * @example dt.set({ hour: 8, minute: 30 })\r\n   * @example dt.set({ weekday: 5 })\r\n   * @example dt.set({ year: 2005, ordinal: 234 })\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  set(values) {\r\n    if (!this.isValid) return this;\r\n    const normalized = normalizeObject(values, normalizeUnit, []),\r\n          settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday);\r\n    let mixed;\r\n\r\n    if (settingWeekStuff) {\r\n      mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));\r\n    } else if (!isUndefined(normalized.ordinal)) {\r\n      mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));\r\n    } else {\r\n      mixed = Object.assign(this.toObject(), normalized); // if we didn't set the day but we ended up on an overflow date,\r\n      // use the last day of the right month\r\n\r\n      if (isUndefined(normalized.day)) {\r\n        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);\r\n      }\r\n    }\r\n\r\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\r\n    return clone$1(this, {\r\n      ts,\r\n      o\r\n    });\r\n  }\r\n  /**\r\n   * Add a period of time to this DateTime and return the resulting DateTime\r\n   *\r\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\r\n   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\r\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\r\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\r\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\r\n   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday\r\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min\r\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  plus(duration) {\r\n    if (!this.isValid) return this;\r\n    const dur = friendlyDuration(duration);\r\n    return clone$1(this, adjustTime(this, dur));\r\n  }\r\n  /**\r\n   * Subtract a period of time to this DateTime and return the resulting DateTime\r\n   * See {@link plus}\r\n   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\r\n   @return {DateTime}\r\n  */\r\n\r\n\r\n  minus(duration) {\r\n    if (!this.isValid) return this;\r\n    const dur = friendlyDuration(duration).negate();\r\n    return clone$1(this, adjustTime(this, dur));\r\n  }\r\n  /**\r\n   * \"Set\" this DateTime to the beginning of a unit of time.\r\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.\r\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\r\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\r\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\r\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  startOf(unit) {\r\n    if (!this.isValid) return this;\r\n    const o = {},\r\n          normalizedUnit = Duration.normalizeUnit(unit);\r\n\r\n    switch (normalizedUnit) {\r\n      case \"years\":\r\n        o.month = 1;\r\n      // falls through\r\n\r\n      case \"quarters\":\r\n      case \"months\":\r\n        o.day = 1;\r\n      // falls through\r\n\r\n      case \"weeks\":\r\n      case \"days\":\r\n        o.hour = 0;\r\n      // falls through\r\n\r\n      case \"hours\":\r\n        o.minute = 0;\r\n      // falls through\r\n\r\n      case \"minutes\":\r\n        o.second = 0;\r\n      // falls through\r\n\r\n      case \"seconds\":\r\n        o.millisecond = 0;\r\n        break;\r\n      // no default, invalid units throw in normalizeUnit()\r\n    }\r\n\r\n    if (normalizedUnit === \"weeks\") {\r\n      o.weekday = 1;\r\n    }\r\n\r\n    if (normalizedUnit === \"quarters\") {\r\n      const q = Math.ceil(this.month / 3);\r\n      o.month = (q - 1) * 3 + 1;\r\n    }\r\n\r\n    return this.set(o);\r\n  }\r\n  /**\r\n   * \"Set\" this DateTime to the end (meaning the last millisecond) of a unit of time\r\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\r\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'\r\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\r\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\r\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\r\n   * @return {DateTime}\r\n   */\r\n\r\n\r\n  endOf(unit) {\r\n    return this.isValid ? this.plus({\r\n      [unit]: 1\r\n    }).startOf(unit).minus(1) : this;\r\n  } // OUTPUT\r\n\r\n  /**\r\n   * Returns a string representation of this DateTime formatted according to the specified format string.\r\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).\r\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale.\r\n   * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens\r\n   * @param {string} fmt - the format string\r\n   * @param {Object} opts - opts to override the configuration options\r\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'\r\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'\r\n   * @example DateTime.local().toFormat('yyyy LLL dd', { locale: \"fr\" }) //=> '2017 avr. 22'\r\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toFormat(fmt, opts = {}) {\r\n    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID$2;\r\n  }\r\n  /**\r\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\r\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation\r\n   * of the DateTime in the assigned locale.\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\r\n   * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options\r\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\r\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\r\n   * @example DateTime.local().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'\r\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\r\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\r\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\r\n   * @example DateTime.local().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'\r\n   * @example DateTime.local().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'\r\n   * @example DateTime.local().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toLocaleString(opts = DATE_SHORT) {\r\n    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this) : INVALID$2;\r\n  }\r\n  /**\r\n   * Returns an array of format \"parts\", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\r\n   * Defaults to the system's locale if no locale has been specified\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\r\n   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\r\n   * @example DateTime.local().toLocaleParts(); //=> [\r\n   *                                   //=>   { type: 'day', value: '25' },\r\n   *                                   //=>   { type: 'literal', value: '/' },\r\n   *                                   //=>   { type: 'month', value: '05' },\r\n   *                                   //=>   { type: 'literal', value: '/' },\r\n   *                                   //=>   { type: 'year', value: '1982' }\r\n   *                                   //=> ]\r\n   */\r\n\r\n\r\n  toLocaleParts(opts = {}) {\r\n    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this DateTime\r\n   * @param {Object} opts - options\r\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\r\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\r\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\r\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\r\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\r\n   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\r\n   * @example DateTime.local().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISO(opts = {}) {\r\n    if (!this.isValid) {\r\n      return null;\r\n    }\r\n\r\n    return `${this.toISODate(opts)}T${this.toISOTime(opts)}`;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\r\n   * @param {Object} opts - options\r\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\r\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\r\n   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISODate({\r\n    format = \"extended\"\r\n  } = {}) {\r\n    let fmt = format === \"basic\" ? \"yyyyMMdd\" : \"yyyy-MM-dd\";\r\n\r\n    if (this.year > 9999) {\r\n      fmt = \"+\" + fmt;\r\n    }\r\n\r\n    return toTechFormat(this, fmt);\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\r\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISOWeekDate() {\r\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\r\n  }\r\n  /**\r\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\r\n   * @param {Object} opts - options\r\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\r\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\r\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n   * @param {string} [opts.format='extended'] - choose between the basic and extended format\r\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'\r\n   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\r\n   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toISOTime({\r\n    suppressMilliseconds = false,\r\n    suppressSeconds = false,\r\n    includeOffset = true,\r\n    format = \"extended\"\r\n  } = {}) {\r\n    return toTechTimeFormat(this, {\r\n      suppressSeconds,\r\n      suppressMilliseconds,\r\n      includeOffset,\r\n      format\r\n    });\r\n  }\r\n  /**\r\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\r\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\r\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toRFC2822() {\r\n    return toTechFormat(this, \"EEE, dd LLL yyyy HH:mm:ss ZZZ\", false);\r\n  }\r\n  /**\r\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\r\n   * Specifically, the string conforms to RFC 1123.\r\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\r\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\r\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toHTTP() {\r\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\r\n  }\r\n  /**\r\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\r\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toSQLDate() {\r\n    return toTechFormat(this, \"yyyy-MM-dd\");\r\n  }\r\n  /**\r\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\r\n   * @param {Object} opts - options\r\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\r\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\r\n   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'\r\n   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'\r\n   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toSQLTime({\r\n    includeOffset = true,\r\n    includeZone = false\r\n  } = {}) {\r\n    return toTechTimeFormat(this, {\r\n      includeOffset,\r\n      includeZone,\r\n      spaceZone: true\r\n    });\r\n  }\r\n  /**\r\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\r\n   * @param {Object} opts - options\r\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\r\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\r\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\r\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\r\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\r\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toSQL(opts = {}) {\r\n    if (!this.isValid) {\r\n      return null;\r\n    }\r\n\r\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\r\n  }\r\n  /**\r\n   * Returns a string representation of this DateTime appropriate for debugging\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toString() {\r\n    return this.isValid ? this.toISO() : INVALID$2;\r\n  }\r\n  /**\r\n   * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  valueOf() {\r\n    return this.toMillis();\r\n  }\r\n  /**\r\n   * Returns the epoch milliseconds of this DateTime.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  toMillis() {\r\n    return this.isValid ? this.ts : NaN;\r\n  }\r\n  /**\r\n   * Returns the epoch seconds of this DateTime.\r\n   * @return {number}\r\n   */\r\n\r\n\r\n  toSeconds() {\r\n    return this.isValid ? this.ts / 1000 : NaN;\r\n  }\r\n  /**\r\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\r\n   * @return {string}\r\n   */\r\n\r\n\r\n  toJSON() {\r\n    return this.toISO();\r\n  }\r\n  /**\r\n   * Returns a BSON serializable equivalent to this DateTime.\r\n   * @return {Date}\r\n   */\r\n\r\n\r\n  toBSON() {\r\n    return this.toJSDate();\r\n  }\r\n  /**\r\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\r\n   * @param opts - options for generating the object\r\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\r\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\r\n   * @return {Object}\r\n   */\r\n\r\n\r\n  toObject(opts = {}) {\r\n    if (!this.isValid) return {};\r\n    const base = Object.assign({}, this.c);\r\n\r\n    if (opts.includeConfig) {\r\n      base.outputCalendar = this.outputCalendar;\r\n      base.numberingSystem = this.loc.numberingSystem;\r\n      base.locale = this.loc.locale;\r\n    }\r\n\r\n    return base;\r\n  }\r\n  /**\r\n   * Returns a Javascript Date equivalent to this DateTime.\r\n   * @return {Date}\r\n   */\r\n\r\n\r\n  toJSDate() {\r\n    return new Date(this.isValid ? this.ts : NaN);\r\n  } // COMPARE\r\n\r\n  /**\r\n   * Return the difference between two DateTimes as a Duration.\r\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\r\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\r\n   * @param {Object} opts - options that affect the creation of the Duration\r\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\r\n   * @example\r\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\r\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\r\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\r\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\r\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\r\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  diff(otherDateTime, unit = \"milliseconds\", opts = {}) {\r\n    if (!this.isValid || !otherDateTime.isValid) {\r\n      return Duration.invalid(this.invalid || otherDateTime.invalid, \"created by diffing an invalid DateTime\");\r\n    }\r\n\r\n    const durOpts = Object.assign({\r\n      locale: this.locale,\r\n      numberingSystem: this.numberingSystem\r\n    }, opts);\r\n    const units = maybeArray(unit).map(Duration.normalizeUnit),\r\n          otherIsLater = otherDateTime.valueOf() > this.valueOf(),\r\n          earlier = otherIsLater ? this : otherDateTime,\r\n          later = otherIsLater ? otherDateTime : this,\r\n          diffed = diff(earlier, later, units, durOpts);\r\n    return otherIsLater ? diffed.negate() : diffed;\r\n  }\r\n  /**\r\n   * Return the difference between this DateTime and right now.\r\n   * See {@link diff}\r\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\r\n   * @param {Object} opts - options that affect the creation of the Duration\r\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\r\n   * @return {Duration}\r\n   */\r\n\r\n\r\n  diffNow(unit = \"milliseconds\", opts = {}) {\r\n    return this.diff(DateTime.local(), unit, opts);\r\n  }\r\n  /**\r\n   * Return an Interval spanning between this DateTime and another DateTime\r\n   * @param {DateTime} otherDateTime - the other end point of the Interval\r\n   * @return {Interval}\r\n   */\r\n\r\n\r\n  until(otherDateTime) {\r\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\r\n  }\r\n  /**\r\n   * Return whether this DateTime is in the same unit of time as another DateTime\r\n   * @param {DateTime} otherDateTime - the other DateTime\r\n   * @param {string} unit - the unit of time to check sameness on\r\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  hasSame(otherDateTime, unit) {\r\n    if (!this.isValid) return false;\r\n\r\n    if (unit === \"millisecond\") {\r\n      return this.valueOf() === otherDateTime.valueOf();\r\n    } else {\r\n      const inputMs = otherDateTime.valueOf();\r\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\r\n    }\r\n  }\r\n  /**\r\n   * Equality check\r\n   * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.\r\n   * To compare just the millisecond values, use `+dt1 === +dt2`.\r\n   * @param {DateTime} other - the other DateTime\r\n   * @return {boolean}\r\n   */\r\n\r\n\r\n  equals(other) {\r\n    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);\r\n  }\r\n  /**\r\n   * Returns a string representation of a this time relative to now, such as \"in two days\". Can only internationalize if your\r\n   * platform supports Intl.RelativeTimeFormat. Rounds down by default.\r\n   * @param {Object} options - options that affect the output\r\n   * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\r\n   * @param {string} [options.style=\"long\"] - the style of units, must be \"long\", \"short\", or \"narrow\"\r\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", or \"seconds\"\r\n   * @param {boolean} [options.round=true] - whether to round the numbers in the output.\r\n   * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.\r\n   * @param {string} options.locale - override the locale of this DateTime\r\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\r\n   * @example DateTime.local().plus({ days: 1 }).toRelative() //=> \"in 1 day\"\r\n   * @example DateTime.local().setLocale(\"es\").toRelative({ days: 1 }) //=> \"dentro de 1 día\"\r\n   * @example DateTime.local().plus({ days: 1 }).toRelative({ locale: \"fr\" }) //=> \"dans 23 heures\"\r\n   * @example DateTime.local().minus({ days: 2 }).toRelative() //=> \"2 days ago\"\r\n   * @example DateTime.local().minus({ days: 2 }).toRelative({ unit: \"hours\" }) //=> \"48 hours ago\"\r\n   * @example DateTime.local().minus({ hours: 36 }).toRelative({ round: false }) //=> \"1.5 days ago\"\r\n   */\r\n\r\n\r\n  toRelative(options = {}) {\r\n    if (!this.isValid) return null;\r\n    const base = options.base || DateTime.fromObject({\r\n      zone: this.zone\r\n    }),\r\n          padding = options.padding ? this < base ? -options.padding : options.padding : 0;\r\n    return diffRelative(base, this.plus(padding), Object.assign(options, {\r\n      numeric: \"always\",\r\n      units: [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\"]\r\n    }));\r\n  }\r\n  /**\r\n   * Returns a string representation of this date relative to today, such as \"yesterday\" or \"next month\".\r\n   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.\r\n   * @param {Object} options - options that affect the output\r\n   * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.\r\n   * @param {string} options.locale - override the locale of this DateTime\r\n   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of \"years\", \"quarters\", \"months\", \"weeks\", or \"days\"\r\n   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this\r\n   * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar() //=> \"tomorrow\"\r\n   * @example DateTime.local().setLocale(\"es\").plus({ days: 1 }).toRelative() //=> \"\"mañana\"\r\n   * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar({ locale: \"fr\" }) //=> \"demain\"\r\n   * @example DateTime.local().minus({ days: 2 }).toRelativeCalendar() //=> \"2 days ago\"\r\n   */\r\n\r\n\r\n  toRelativeCalendar(options = {}) {\r\n    if (!this.isValid) return null;\r\n    return diffRelative(options.base || DateTime.fromObject({\r\n      zone: this.zone\r\n    }), this, Object.assign(options, {\r\n      numeric: \"auto\",\r\n      units: [\"years\", \"months\", \"days\"],\r\n      calendary: true\r\n    }));\r\n  }\r\n  /**\r\n   * Return the min of several date times\r\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\r\n   * @return {DateTime} the min DateTime, or undefined if called with no argument\r\n   */\r\n\r\n\r\n  static min(...dateTimes) {\r\n    if (!dateTimes.every(DateTime.isDateTime)) {\r\n      throw new InvalidArgumentError(\"min requires all arguments be DateTimes\");\r\n    }\r\n\r\n    return bestBy(dateTimes, i => i.valueOf(), Math.min);\r\n  }\r\n  /**\r\n   * Return the max of several date times\r\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\r\n   * @return {DateTime} the max DateTime, or undefined if called with no argument\r\n   */\r\n\r\n\r\n  static max(...dateTimes) {\r\n    if (!dateTimes.every(DateTime.isDateTime)) {\r\n      throw new InvalidArgumentError(\"max requires all arguments be DateTimes\");\r\n    }\r\n\r\n    return bestBy(dateTimes, i => i.valueOf(), Math.max);\r\n  } // MISC\r\n\r\n  /**\r\n   * Explain how a string would be parsed by fromFormat()\r\n   * @param {string} text - the string to parse\r\n   * @param {string} fmt - the format the string is expected to be in (see description)\r\n   * @param {Object} options - options taken by fromFormat()\r\n   * @return {Object}\r\n   */\r\n\r\n\r\n  static fromFormatExplain(text, fmt, options = {}) {\r\n    const {\r\n      locale = null,\r\n      numberingSystem = null\r\n    } = options,\r\n          localeToUse = Locale.fromOpts({\r\n      locale,\r\n      numberingSystem,\r\n      defaultToEN: true\r\n    });\r\n    return explainFromTokens(localeToUse, text, fmt);\r\n  }\r\n  /**\r\n   * @deprecated use fromFormatExplain instead\r\n   */\r\n\r\n\r\n  static fromStringExplain(text, fmt, options = {}) {\r\n    return DateTime.fromFormatExplain(text, fmt, options);\r\n  } // FORMAT PRESETS\r\n\r\n  /**\r\n   * {@link toLocaleString} format like 10/14/1983\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATE_SHORT() {\r\n    return DATE_SHORT;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Oct 14, 1983'\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATE_MED() {\r\n    return DATE_MED;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'October 14, 1983'\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATE_FULL() {\r\n    return DATE_FULL;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATE_HUGE() {\r\n    return DATE_HUGE;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_SIMPLE() {\r\n    return TIME_SIMPLE;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_WITH_SECONDS() {\r\n    return TIME_WITH_SECONDS;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_WITH_SHORT_OFFSET() {\r\n    return TIME_WITH_SHORT_OFFSET;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_WITH_LONG_OFFSET() {\r\n    return TIME_WITH_LONG_OFFSET;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30', always 24-hour.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_24_SIMPLE() {\r\n    return TIME_24_SIMPLE;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_24_WITH_SECONDS() {\r\n    return TIME_24_WITH_SECONDS;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_24_WITH_SHORT_OFFSET() {\r\n    return TIME_24_WITH_SHORT_OFFSET;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get TIME_24_WITH_LONG_OFFSET() {\r\n    return TIME_24_WITH_LONG_OFFSET;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_SHORT() {\r\n    return DATETIME_SHORT;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_SHORT_WITH_SECONDS() {\r\n    return DATETIME_SHORT_WITH_SECONDS;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_MED() {\r\n    return DATETIME_MED;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_MED_WITH_SECONDS() {\r\n    return DATETIME_MED_WITH_SECONDS;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_MED_WITH_WEEKDAY() {\r\n    return DATETIME_MED_WITH_WEEKDAY;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_FULL() {\r\n    return DATETIME_FULL;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_FULL_WITH_SECONDS() {\r\n    return DATETIME_FULL_WITH_SECONDS;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_HUGE() {\r\n    return DATETIME_HUGE;\r\n  }\r\n  /**\r\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\r\n   * @type {Object}\r\n   */\r\n\r\n\r\n  static get DATETIME_HUGE_WITH_SECONDS() {\r\n    return DATETIME_HUGE_WITH_SECONDS;\r\n  }\r\n\r\n}\r\n/**\r\n * @private\r\n */\r\n\r\n\r\nfunction friendlyDateTime(dateTimeish) {\r\n  if (DateTime.isDateTime(dateTimeish)) {\r\n    return dateTimeish;\r\n  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {\r\n    return DateTime.fromJSDate(dateTimeish);\r\n  } else if (dateTimeish && typeof dateTimeish === \"object\") {\r\n    return DateTime.fromObject(dateTimeish);\r\n  } else {\r\n    throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`);\r\n  }\r\n}\r\n\r\nexport { DateTime };\r\n// export { Duration };\r\n// export { FixedOffsetZone };\r\n// export { IANAZone };\r\n// export { Info };\r\n// export { Interval };\r\n// export { InvalidZone };\r\n// export { LocalZone };\r\n// export { Settings };\r\n// export { Zone }; \r\n\r\n// export default _exp;","import {DateTime} from './luxon.js';\r\n\r\nexport const diffDates = (firstDate, secondDate) => {\r\n    firstDate = DateTime.fromISO(firstDate);\r\n    secondDate = DateTime.fromISO(secondDate);\r\n\r\n    if (firstDate > secondDate) {\r\n        [firstDate, secondDate] = [secondDate, firstDate];\r\n    };\r\n\r\n    return secondDate.diff(firstDate, ['years', 'months', 'days']).toObject();\r\n};\r\n\r\nexport const diffToHTML = diff => \r\n    `<span>\r\n        ${diff.years ? 'Лет: ' + diff.years : ' '}\r\n        ${diff.months ? 'Месяцев: ' + diff.months : ' '}\r\n        ${diff.days ? 'Дней: ' + diff.days : ' '}\r\n    </span>`    \r\n;\r\n","export const formatError = text => \r\n    `<span style='color: red;'>\r\n        ${text}\r\n    </span> `\r\n;","import { diffDates, diffToHTML } from './diffdates.js';\r\nimport { formatError } from './utils.js';\r\n\r\nconst dateCalcResult = document.getElementById('datecalc__result');\r\n\r\n\r\nexport const dateDiff = (event) => {\r\n   dateCalcResult.innerHTML = '';\r\n\r\n   let { firstDate, secondDate } = event.target.elements;\r\n   firstDate = firstDate.value, secondDate = secondDate.value;\r\n\r\n   if (firstDate && secondDate) {\r\n      const diff = diffDates(firstDate, secondDate);\r\n      dateCalcResult.innerHTML = diffToHTML(diffDates(firstDate, secondDate));\r\n   }\r\n   else dateCalcResult.innerHTML = formatError('Для расчета промежутка необходимо заполнить оба поля');\r\n};\r\n\r\n// dateCalcForm.addEventListener('submit', dateDiff);\r\n\r\n// const dateDiff = dateDiff;","/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n","import './howler.js';\r\nimport { formatError } from './utils.js';\r\n\r\nlet buttonRun = document.getElementById(\"timerBtn\");\r\nlet timerShow = document.getElementById(\"timer__result\"); \r\n\r\n\r\nconst sound = new Howl({\r\n\tsrc: ['./src/sounds/alarm.mp3']\r\n});\r\n\r\nlet timer = null;\r\n \r\n\r\nconst showText = (str) => {\r\n\ttimerShow.innerHTML = str;\r\n};\r\n\r\nexport const runTimer = () => {\r\n\tbuttonRun.innerHTML = buttonRun.innerHTML === 'Старт' ? 'Стоп' : 'Старт';\r\n\tif (buttonRun.innerHTML === 'Старт') {\r\n\t\tclearInterval(timer);\r\n\t\tshowText('');\r\n\t} else {\r\n\t\tlet time = document.getElementById(\"time\"); \r\n\t\ttime = time.value*60;\r\n\t\t// startTimer;\r\n\t\ttimer = setInterval(() => {\r\n\t\t\tlet seconds = time%60\r\n\t\t\tlet minutes = time/60%60\r\n\t\t\tlet hour = time/60/60%60\r\n \r\n\t\t\tif (time <= 0) {\r\n\t\t\t\t clearInterval(timer);\r\n\t\t\t\t showText(formatError('Время закончилось!'));\r\n\t\t\t\t buttonRun.innerHTML = 'Старт'; \r\n\t\t\t\t sound.play();\r\n\t\t\t} else {\r\n\t\t\t\t showText(\r\n\t\t\t\t`\tОсталось: \r\n\t\t\t\t\t${Math.trunc(hour) ? 'Часов: ' + Math.trunc(hour) : ' '}\r\n\t\t\t\t\t${Math.trunc(minutes) ? 'Минут: ' + Math.trunc(minutes) : ' '}\r\n\t\t\t\t\t${seconds ? 'Секунд: ' + seconds : ' '}\r\n\t\t\t\t `\r\n\t\t\t\t );\r\n\t\t\t}\r\n\t\t\t--time;\r\n\t  }, 1000);\r\n\t}\r\n};","import {changeForm} from './changeForm.js';\r\nimport { dateDiff } from './datecalc.js';\r\nimport { runTimer } from './timer.js';\r\n\r\n\r\nconst dateCalcForm = document.getElementById('datecalcform');\r\nconst timerForm = document.getElementById('timerform');\r\n\r\nconst btnCurrentFormCalc = document.getElementById('btnCurrentFormCalc');\r\nconst btnCurrentFormTimer = document.getElementById('btnCurrentFormTimer');\r\n\r\n// let buttonRun = document.getElementById(\"timerBtn\");\r\n\r\ndateCalcForm.addEventListener('submit', (event) => {\r\n\tevent.preventDefault();\r\n\tdateDiff(event);\r\n});\r\n\r\n\r\ntimerForm.addEventListener('submit', (event) => {\r\n\tevent.preventDefault();\r\n\trunTimer();\r\n});\r\n\r\nbtnCurrentFormCalc.addEventListener('click', () => {\r\n\tchangeForm(dateCalcForm, btnCurrentFormCalc);\r\n});\r\n\r\nbtnCurrentFormTimer.addEventListener('click', () => {\r\n\tchangeForm(timerForm, btnCurrentFormTimer);\r\n});"]}